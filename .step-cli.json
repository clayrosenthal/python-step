{
    "__subcommands__": {
        "help": "display help for the specified command or command group",
        "version": "display the current version of the cli",
        "base64": "encodes and decodes using base64 representation",
        "ca": "initialize and manage a certificate authority",
        "beta": "commands that are being tested; these APIs are likely to change",
        "certificate": "create, revoke, validate, bundle, and otherwise manage certificates",
        "completion": "print the shell completion script",
        "context": "manage certificate authority contexts",
        "crl": "initialize and manage a certificate revocation list",
        "crypto": "useful cryptographic plumbing",
        "oauth": "authorization and single sign-on using OAuth & OIDC",
        "path": "print the configured step path and exit",
        "ssh": "create and manage ssh certificates"
    },
    "__arguements__": {
        "help": {
            "description": "show help",
            "alt_form": "h",
            "type": "option"
        },
        "config": {
            "description": "path to the config file to use for CLI flags",
            "param": "value",
            "type": "optional argument"
        },
        "version": {
            "description": "print the version",
            "alt_form": "v",
            "type": "option"
        }
    },
    "help": {
        "__arguements__": {
            "http": {
                "description": "HTTP service address (e.g., ':8080')",
                "param": "value",
                "type": "optional argument"
            },
            "html": {
                "description": "The export directory for HTML docs.",
                "param": "directory",
                "type": "optional argument"
            },
            "markdown": {
                "description": "The export directory for Markdown docs.",
                "param": "directory",
                "type": "optional argument"
            },
            "report": {
                "description": "Writes a JSON report to the HTML docs directory.",
                "type": "option"
            }
        }
    },
    "version": {},
    "base64": {
        "__arguements__": {
            "d": {
                "description": "decode base64 input",
                "alt_form": "decode",
                "type": "option"
            },
            "r": {
                "description": "use the unpadded base64 encoding",
                "alt_form": "raw",
                "type": "option"
            },
            "u": {
                "description": "use the encoding format typically used in URLs and file names",
                "alt_form": "url",
                "type": "option"
            }
        }
    },
    "ca": {
        "__subcommands__": {
            "health": "get the status of the CA",
            "init": "initialize the CA PKI",
            "bootstrap": "initialize the environment to use the CA commands",
            "token": "generate an OTT granting access to the CA",
            "certificate": "generate a new private key and certificate signed by the root certificate",
            "rekey": "rekey a certificate",
            "renew": "renew a certificate",
            "revoke": "revoke a certificate",
            "provisioner": "create and manage the certificate authority provisioners",
            "sign": "generate a new certificate signing a certificate request",
            "root": "download and validate the root certificate",
            "roots": "download all the root certificates",
            "federation": "download all the federated certificates",
            "acme": "manage ACME settings",
            "policy": "manage certificate issuance policies",
            "admin": "create and manage the certificate authority admins"
        },
        "__arguements__": {
            "help": {
                "description": "show help",
                "alt_form": "h",
                "type": "option"
            }
        },
        "health": {
            "__arguements__": {
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "init": {
            "__arguements__": {
                "root": {
                    "description": "The path of an existing PEM file to be used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "key": {
                    "description": "The path of an existing key file of the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "pki": {
                    "description": "Generate only the PKI without the CA configuration.",
                    "type": "option"
                },
                "ssh": {
                    "description": "Create keys to sign SSH certificates.",
                    "type": "option"
                },
                "helm": {
                    "description": "Generates a Helm values YAML to be used with step-certificates chart.",
                    "type": "option"
                },
                "deployment-type": {
                    "description": "The name of the deployment type to use. Options are:  standalone An instance of step-ca that does not connect to any cloud services. You manage authority keys and configuration yourself. Choose standalone if you'd like to run step-ca yourself and do not want cloud services or commercial support.  linked An instance of step-ca with locally managed keys that connects to your Certificate Manager account for provisioner management, alerting, reporting, revocation, and other managed services. Choose linked if you'd like cloud services and support, but need to control your authority's signing keys.  hosted A highly available, fully-managed instance of step-ca run by smallstep just for you. Choose hosted if you'd like cloud services and support.  More information and pricing at: https://u.step.sm/cm",
                    "param": "name",
                    "type": "optional argument"
                },
                "name": {
                    "description": "The name of the new PKI.",
                    "param": "name",
                    "type": "optional argument"
                },
                "dns": {
                    "description": "The DNS name or IP address of the new CA. Use the '--dns' flag multiple times to configure multiple DNS names.",
                    "param": "name",
                    "type": "optional argument"
                },
                "address": {
                    "description": "The address that the new CA will listen at.",
                    "param": "address",
                    "type": "optional argument"
                },
                "provisioner": {
                    "description": "The name of the first provisioner.",
                    "param": "name",
                    "type": "optional argument"
                },
                "password-file": {
                    "description": "The path to the file containing the password to encrypt the keys.",
                    "param": "file",
                    "type": "optional argument"
                },
                "provisioner-password-file": {
                    "description": "The path to the file containing the password to encrypt the provisioner key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "with-ca-url": {
                    "description": "URI of the Step Certificate Authority to write in defaults.json",
                    "param": "URI",
                    "type": "optional argument"
                },
                "ra": {
                    "description": "The registration authority type to use. Currently \"StepCAS\" and \"CloudCAS\" are supported.",
                    "param": "type",
                    "type": "optional argument"
                },
                "kms": {
                    "description": "The key manager service type to use to manage keys. Options are:  azurekms Use Azure Key Vault to manage X.509 and SSH keys. The key URIs have the following format azurekms:name=key-name;vault=vault-name.",
                    "param": "type",
                    "type": "optional argument"
                },
                "kms-root": {
                    "description": "The kms URI used to generate the root certificate key. Examples are:  azurekms azurekms:name=my-root-key;vault=my-vault",
                    "param": "URI",
                    "type": "optional argument"
                },
                "kms-intermediate": {
                    "description": "The kms URI used to generate the intermediate certificate key. Examples are:  azurekms azurekms:name=my-intermediate-key;vault=my-vault",
                    "param": "URI",
                    "type": "optional argument"
                },
                "kms-ssh-host": {
                    "description": "The kms URI used to generate the key used to sign SSH host certificates. Examples are:  azurekms azurekms:name=my-host-key;vault=my-vault",
                    "param": "URI",
                    "type": "optional argument"
                },
                "kms-ssh-user": {
                    "description": "The kms URI used to generate the key used to sign SSH user certificates. Examples are:  azurekms azurekms:name=my-user-key;vault=my-vault",
                    "param": "URI",
                    "type": "optional argument"
                },
                "issuer": {
                    "description": "The registration authority issuer url to use.  If StepCAS is used, this flag should be the URL of the CA to connect to, e.g https://ca.smallstep.com:9000  If CloudCAS is used, this flag should be the resource name of the intermediate certificate to use. This has the format 'projects/*/locations/*/caPools/*/certificateAuthorities/*'.",
                    "param": "url",
                    "type": "optional argument"
                },
                "issuer-fingerprint": {
                    "description": "The root certificate fingerprint of the issuer CA. This flag is supported in \"StepCAS\", and it should be the result of running:  $ step certificate fingerprint root_ca.crt 4fe5f5ef09e95c803fdcb80b8cf511e2a885eb86f3ce74e3e90e62fa3faf1531",
                    "param": "fingerprint",
                    "type": "optional argument"
                },
                "issuer-provisioner": {
                    "description": "The name of an existing provisioner in the issuer CA. This flag is supported in \"StepCAS\".",
                    "param": "name",
                    "type": "optional argument"
                },
                "credentials-file": {
                    "description": "The registration authority credentials file to use.  If CloudCAS is used, this flag should be the path to a service account key. It can also be set using the 'GOOGLE_APPLICATION_CREDENTIALS=path' environment variable or the default service account in an instance in Google Cloud.",
                    "param": "file",
                    "type": "optional argument"
                },
                "no-db": {
                    "description": "Generate a CA configuration without the DB stanza. No persistence layer.",
                    "type": "option"
                },
                "context": {
                    "description": "The name of the context for the new authority.",
                    "param": "name",
                    "type": "optional argument"
                },
                "remote-management": {
                    "description": "Enable Remote Management. Defaults to false.",
                    "type": "option"
                },
                "acme": {
                    "description": "Create a default ACME provisioner. Defaults to false.",
                    "type": "option"
                },
                "admin-subject": {
                    "description": "The admin subject to use for generating admin credentials.",
                    "param": "subject",
                    "alt_form": "admin-name",
                    "type": "optional argument"
                },
                "profile": {
                    "description": "The name that will serve as the profile name for the context.",
                    "param": "name",
                    "type": "optional argument"
                },
                "authority": {
                    "description": "The name that will serve as the authority name for the context.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "bootstrap": {
            "__arguements__": {
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "fingerprint": {
                    "description": "The fingerprint of the targeted root certificate.",
                    "param": "fingerprint",
                    "type": "optional argument"
                },
                "install": {
                    "description": "Install the root certificate into the system truststore.",
                    "type": "option"
                },
                "team": {
                    "description": "The team ID used to bootstrap the environment.",
                    "param": "ID",
                    "type": "optional argument"
                },
                "team-authority": {
                    "description": "The sub-domain of the certificate authority to bootstrap. E.g., for an authority with domain name 'certs.example-team.ca.smallstep.com' the value would be 'certs'.",
                    "param": "sub-domain",
                    "type": "optional argument"
                },
                "team-url": {
                    "description": "The url step queries to retrieve initial team configuration. Only used with the --team option. If the url contains <> placeholders, they are replaced with the team ID. Replacing the authority-id section of the url is not supported with placeholders.",
                    "param": "url",
                    "type": "optional argument"
                },
                "redirect-url": {
                    "description": "The url to open in the system browser when the OAuth flow is successful.",
                    "param": "url",
                    "type": "optional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                },
                "profile": {
                    "description": "The name that will serve as the profile name for the context.",
                    "param": "name",
                    "type": "optional argument"
                },
                "authority": {
                    "description": "The name that will serve as the authority name for the context.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "token": {
            "__arguements__": {
                "subject": {
                    "description": "The Common Name, DNS Name, or IP address that will be set by the certificate authority. When there are no additional Subject Alternative Names configured (via the --san flag), the subject will be added as the only element of the 'sans' claim on the token.",
                    "type": "positional argument"
                },
                "kid": {
                    "description": "The provisioner kid to use.",
                    "param": "kid",
                    "type": "optional argument"
                },
                "san": {
                    "description": "Add dns|ip|email|uri Subject Alternative Name(s) (SANs) that should be authorized. A certificate signing request using this token must match the complete set of SANs in the token 1:1. Use the '--san' flag multiple times to configure multiple SANs.",
                    "param": "dns|ip|email|uri",
                    "type": "optional argument"
                },
                "principal": {
                    "description": "Add the principals (user or host names) that the token is authorized to request. The signing request using this token won't be able to add extra names. Use the '--principal' flag multiple times to configure multiple principals.",
                    "param": "name",
                    "alt_form": "n",
                    "type": "optional argument"
                },
                "host": {
                    "description": "Create a host certificate instead of a user certificate.",
                    "type": "option"
                },
                "ca-config": {
                    "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                    "param": "file",
                    "type": "optional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "not-after": {
                    "description": "The time|duration when the certificate validity period ends. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "time|duration",
                    "type": "optional argument"
                },
                "not-before": {
                    "description": "The time|duration when the certificate validity period starts. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "time|duration",
                    "type": "optional argument"
                },
                "cert-not-after": {
                    "description": "The time|duration when the certificate validity period ends. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\". This flag is only supported on SSH certificates.",
                    "param": "time|duration",
                    "type": "optional argument"
                },
                "cert-not-before": {
                    "description": "The time|duration when the certificate validity period starts. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\". This flag is only supported on SSH certificates.",
                    "param": "time|duration",
                    "type": "optional argument"
                },
                "provisioner": {
                    "description": "The provisioner name to use.",
                    "param": "name",
                    "alt_form": "issuer",
                    "type": "optional argument"
                },
                "password-file": {
                    "description": "The path to the file containing the password to encrypt or decrypt the private key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "provisioner-password-file": {
                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "kms": {
                    "description": "The uri to configure a Cloud KMS or an HSM.",
                    "param": "uri",
                    "type": "optional argument"
                },
                "x5c-cert": {
                    "description": "Certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                    "param": "chain",
                    "type": "optional argument"
                },
                "x5c-key": {
                    "description": "Private key file, used to sign a JWT, corresponding to the certificate that will be stored in the 'x5c' header.",
                    "param": "file",
                    "type": "optional argument"
                },
                "x5c-insecure": {
                    "description": "Use the JWT header 'x5cInsecure' instead of 'x5c'.",
                    "type": "option"
                },
                "sshpop-cert": {
                    "description": "Certificate (chain) in PEM format to store in the 'sshpop' header of a JWT.",
                    "param": "chain",
                    "type": "optional argument"
                },
                "sshpop-key": {
                    "description": "Private key file, used to sign a JWT, corresponding to the certificate that will be stored in the 'sshpop' header.",
                    "param": "file",
                    "type": "optional argument"
                },
                "nebula-cert": {
                    "description": "Certificate file in PEM format to store in the 'nebula' header of a JWT.",
                    "param": "file",
                    "type": "optional argument"
                },
                "nebula-key": {
                    "description": "Private key file, used to sign a JWT, corresponding to the certificate that will be stored in the 'nebula' header.",
                    "param": "file",
                    "type": "optional argument"
                },
                "key": {
                    "description": "The private key file used to sign the JWT. This is usually downloaded from the certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "output-file": {
                    "description": "The destination file of the generated one-time token.",
                    "param": "file",
                    "type": "optional argument"
                },
                "revoke": {
                    "description": "Create a token for authorizing 'Revoke' requests. The audience will be invalid for any other API request.",
                    "type": "option"
                },
                "renew": {
                    "description": "Create a token for authorizing 'renew' requests. The audience will be invalid for any other API request.",
                    "type": "option"
                },
                "rekey": {
                    "description": "Create a token for authorizing 'rekey' requests. The audience will be invalid for any other API request.",
                    "type": "option"
                },
                "ssh": {
                    "description": "Create a token for authorizing an SSH certificate signing request.",
                    "type": "option"
                },
                "k8ssa-token-path": {
                    "description": "Configure the file from which to read the kubernetes service account token.",
                    "param": "file",
                    "type": "optional argument"
                },
                "offline": {
                    "description": "Creates a certificate without contacting the certificate authority. Offline mode uses the configuration, certificates, and keys created with step ca init, but can accept a different configuration file using --ca-config flag.",
                    "type": "option"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "certificate": {
            "__arguements__": {
                "subject": {
                    "description": "The Common Name, DNS Name, or IP address that will be set as the Subject Common Name for the certificate. If no Subject Alternative Names (SANs) are configured (via the --san flag) then the subject will be set as the only SAN.",
                    "type": "positional argument"
                },
                "crt-file": {
                    "description": "File to write the certificate (PEM format)",
                    "type": "positional argument"
                },
                "key-file": {
                    "description": "File to write the private key (PEM format)",
                    "type": "positional argument"
                },
                "san": {
                    "description": "Add dns|ip|email|uri Subject Alternative Name(s) (SANs) that should be authorized. Use the '--san' flag multiple times to configure multiple SANs. The '--san' flag and the '--token' flag are mutually exclusive.",
                    "param": "dns|ip|email|uri",
                    "type": "optional argument"
                },
                "attestation-ca-url": {
                    "description": "The base url of the Attestation CA to use",
                    "param": "value",
                    "type": "optional argument"
                },
                "attestation-ca-root": {
                    "description": "The path to the PEM file with trusted roots when connecting to the Attestation CA",
                    "param": "file",
                    "type": "optional argument"
                },
                "tpm-storage-directory": {
                    "description": "The directory where TPM keys and certificates will be stored",
                    "param": "value",
                    "type": "optional argument"
                },
                "set": {
                    "description": "The key=value pair with template data variables. Use the --set flag multiple times to add multiple variables.",
                    "param": "key",
                    "type": "optional argument"
                },
                "set-file": {
                    "description": "The JSON file with the template data variables.",
                    "param": "file",
                    "type": "optional argument"
                },
                "ca-config": {
                    "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                    "param": "file",
                    "type": "optional argument"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "token": {
                    "description": "The one-time token used to authenticate with the CA in order to create the certificate.",
                    "param": "token",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                },
                "provisioner": {
                    "description": "The provisioner name to use.",
                    "param": "name",
                    "alt_form": "issuer",
                    "type": "optional argument"
                },
                "provisioner-password-file": {
                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "kty": {
                    "description": "The kty to build the certificate upon. If unset, default is EC.  kty is a case-sensitive string and must be one of:  EC Create an elliptic curve keypair  OKP Create an octet key pair (for \"Ed25519\" curve)  RSA Create an RSA keypair",
                    "param": "kty",
                    "type": "optional argument"
                },
                "crv": {
                    "description": "The elliptic curve to use for EC and OKP key types. Corresponds to the \"crv\" JWK parameter. Valid curves are defined in JWA [RFC7518]. If unset, default is P-256 for EC keys and Ed25519 for OKP keys.  curve is a case-sensitive string and must be one of:  P-256 NIST P-256 Curve  P-384 NIST P-384 Curve  P-521 NIST P-521 Curve  Ed25519 Ed25519 Curve",
                    "param": "curve",
                    "alt_form": "curve",
                    "type": "optional argument"
                },
                "size": {
                    "description": "The size (in bits) of the key for RSA and oct key types. RSA keys require a minimum key size of 2048 bits. If unset, default is 2048 bits for RSA keys and 128 bits for oct keys.",
                    "param": "size",
                    "type": "optional argument"
                },
                "not-after": {
                    "description": "The time|duration when the certificate validity period ends. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "time|duration",
                    "type": "optional argument"
                },
                "not-before": {
                    "description": "The time|duration when the certificate validity period starts. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "time|duration",
                    "type": "optional argument"
                },
                "attestation-uri": {
                    "description": "The KMS uri used for attestation.",
                    "param": "uri",
                    "type": "optional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "offline": {
                    "description": "Creates a certificate without contacting the certificate authority. Offline mode uses the configuration, certificates, and keys created with step ca init, but can accept a different configuration file using --ca-config flag.",
                    "type": "option"
                },
                "password-file": {
                    "description": "The path to the file containing the password to encrypt or decrypt the private key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "console": {
                    "description": "Complete the flow while remaining inside the terminal",
                    "type": "option"
                },
                "kms": {
                    "description": "The uri to configure a Cloud KMS or an HSM.",
                    "param": "uri",
                    "type": "optional argument"
                },
                "x5c-cert": {
                    "description": "Certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                    "param": "chain",
                    "type": "optional argument"
                },
                "x5c-key": {
                    "description": "Private key file, used to sign a JWT, corresponding to the certificate that will be stored in the 'x5c' header.",
                    "param": "file",
                    "type": "optional argument"
                },
                "x5c-chain": {
                    "description": "Certificate file, in PEM format",
                    "param": "file",
                    "type": "optional argument"
                },
                "nebula-cert": {
                    "description": "Certificate file in PEM format to store in the 'nebula' header of a JWT.",
                    "param": "file",
                    "type": "optional argument"
                },
                "nebula-key": {
                    "description": "Private key file, used to sign a JWT, corresponding to the certificate that will be stored in the 'nebula' header.",
                    "param": "file",
                    "type": "optional argument"
                },
                "acme": {
                    "description": "ACME directory url to be used for requesting certificates via the ACME protocol. Use this flag to define an ACME server other than the Step CA. If this flag is absent and an ACME provisioner has been selected then the '--ca-url' flag must be defined.",
                    "param": "url",
                    "type": "optional argument"
                },
                "standalone": {
                    "description": "Get a certificate using the ACME protocol and standalone mode for validation. Standalone is a mode in which the step process will run a server that will will respond to ACME challenge validation requests. Standalone is the default mode for serving challenge validation requests.",
                    "type": "option"
                },
                "webroot": {
                    "description": "Specify a file to use as a 'web root' for validation in the ACME protocol. Webroot is a mode in which the step process will write a challenge file to a location being served by an existing fileserver in order to respond to ACME challenge validation requests.",
                    "param": "file",
                    "type": "optional argument"
                },
                "contact": {
                    "description": "The email-address used for contact as part of the ACME protocol. These contacts may be used to warn of certificate expiration or other certificate lifetime events. Use the '--contact' flag multiple times to configure multiple contacts.",
                    "param": "email-address",
                    "type": "optional argument"
                },
                "http-listen": {
                    "description": "Use a non-standard http address, behind a reverse proxy or load balancer, for serving ACME challenges. The default address is :80, which requires super user (sudo) privileges. This flag must be used in conjunction with the '--standalone' flag.",
                    "param": "address",
                    "type": "optional argument"
                },
                "k8ssa-token-path": {
                    "description": "Configure the file from which to read the kubernetes service account token.",
                    "param": "file",
                    "type": "optional argument"
                }
            }
        },
        "rekey": {
            "__arguements__": {
                "crt-file": {
                    "description": "The certificate in PEM format that we want to rekey.",
                    "type": "positional argument"
                },
                "key-file": {
                    "description": "They key file of the certificate.",
                    "type": "positional argument"
                },
                "out-cert": {
                    "description": "The file where the new certificate will be saved to. Defaults to overwriting the crt-file positional argument.",
                    "param": "file",
                    "type": "optional argument"
                },
                "out-key": {
                    "description": "The file to store the new private key. Defaults to overwriting the key-file positional argument.",
                    "param": "file",
                    "type": "optional argument"
                },
                "private-key": {
                    "description": "The file containing the private key for rekey-ing the certificate. By default, a new random key pair will be generated.",
                    "param": "file",
                    "type": "optional argument"
                },
                "expires-in": {
                    "description": "The amount of time remaining before certificate expiration, at which point a rekey should be attempted. The certificate rekey will not be performed if the time to expiration is greater than the --expires-in value. A random jitter (duration/20) will be added to avoid multiple services hitting the rekey endpoint at the same time. The duration is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "duration",
                    "type": "optional argument"
                },
                "pid": {
                    "description": "The process id to signal after the certificate has been rekeyed. By default the the SIGHUP (1) signal will be used, but this can be configured with the --signal flag.",
                    "param": "value",
                    "type": "optional argument"
                },
                "pid-file": {
                    "description": "The file from which to read the process id that will be signaled after the certificate has been rekeyed. By default the SIGHUP (1) signal will be used, but this can be configured with the --signal flag.",
                    "param": "file",
                    "type": "optional argument"
                },
                "signal": {
                    "description": "The signal number to send to the selected PID, so it can reload the configuration and load the new certificate. Default value is SIGHUP (1)",
                    "param": "number",
                    "type": "optional argument"
                },
                "exec": {
                    "description": "The command to run after the certificate has been rekeyed.",
                    "param": "command",
                    "type": "optional argument"
                },
                "daemon": {
                    "description": "Run the rekey command as a daemon, rekeying and overwriting the certificate periodically. By default the daemon will rekey a certificate before 2/3 of the time to expiration has elapsed. The period can be configured using the --rekey-period or --expires-in flags.",
                    "type": "option"
                },
                "rekey-period": {
                    "description": "The period with which to schedule rekeying of the certificate in daemon mode. Requires the --daemon flag. The duration is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"1.5h\", or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "duration",
                    "type": "optional argument"
                },
                "kty": {
                    "description": "The kty to build the certificate upon. If unset, default is EC.  kty is a case-sensitive string and must be one of:  EC Create an elliptic curve keypair  OKP Create an octet key pair (for \"Ed25519\" curve)  RSA Create an RSA keypair",
                    "param": "kty",
                    "type": "optional argument"
                },
                "crv": {
                    "description": "The elliptic curve to use for EC and OKP key types. Corresponds to the \"crv\" JWK parameter. Valid curves are defined in JWA [RFC7518]. If unset, default is P-256 for EC keys and Ed25519 for OKP keys.  curve is a case-sensitive string and must be one of:  P-256 NIST P-256 Curve  P-384 NIST P-384 Curve  P-521 NIST P-521 Curve  Ed25519 Ed25519 Curve",
                    "param": "curve",
                    "alt_form": "curve",
                    "type": "optional argument"
                },
                "size": {
                    "description": "The size (in bits) of the key for RSA and oct key types. RSA keys require a minimum key size of 2048 bits. If unset, default is 2048 bits for RSA keys and 128 bits for oct keys.",
                    "param": "size",
                    "type": "optional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "offline": {
                    "description": "Creates a certificate without contacting the certificate authority. Offline mode uses the configuration, certificates, and keys created with step ca init, but can accept a different configuration file using --ca-config flag.",
                    "type": "option"
                },
                "password-file": {
                    "description": "The path to the file containing the password to encrypt or decrypt the private key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "ca-config": {
                    "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                    "param": "file",
                    "type": "optional argument"
                }
            }
        },
        "renew": {
            "__arguements__": {
                "crt-file": {
                    "description": "The certificate in PEM format that we want to renew.",
                    "type": "positional argument"
                },
                "key-file": {
                    "description": "They key file of the certificate.",
                    "type": "positional argument"
                },
                "mtls": {
                    "description": "Use mTLS to renew a certificate. Use --mtls=false to force the token authorization flow instead.",
                    "type": "option"
                },
                "ca-config": {
                    "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                    "param": "file",
                    "type": "optional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "offline": {
                    "description": "Creates a certificate without contacting the certificate authority. Offline mode uses the configuration, certificates, and keys created with step ca init, but can accept a different configuration file using --ca-config flag.",
                    "type": "option"
                },
                "password-file": {
                    "description": "The path to the file containing the password to encrypt or decrypt the private key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "out": {
                    "description": "The new certificate file path. Defaults to overwriting the crt-file positional argument",
                    "param": "file",
                    "alt_form": "output-file",
                    "type": "optional argument"
                },
                "expires-in": {
                    "description": "The amount of time remaining before certificate expiration, at which point a renewal should be attempted. The certificate renewal will not be performed if the time to expiration is greater than the --expires-in value. A random jitter (duration/20) will be added to avoid multiple services hitting the renew endpoint at the same time. The duration is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "duration",
                    "type": "optional argument"
                },
                "pid": {
                    "description": "The process id to signal after the certificate has been renewed. By default the the SIGHUP (1) signal will be used, but this can be configured with the --signal flag.",
                    "param": "value",
                    "type": "optional argument"
                },
                "pid-file": {
                    "description": "The file from which to read the process id that will be signaled after the certificate has been renewed. By default the SIGHUP (1) signal will be used, but this can be configured with the --signal flag.",
                    "param": "file",
                    "type": "optional argument"
                },
                "signal": {
                    "description": "The signal number to send to the selected PID, so it can reload the configuration and load the new certificate. Default value is SIGHUP (1)",
                    "param": "number",
                    "type": "optional argument"
                },
                "exec": {
                    "description": "The command to run after the certificate has been renewed.",
                    "param": "command",
                    "type": "optional argument"
                },
                "daemon": {
                    "description": "Run the renew command as a daemon, renewing and overwriting the certificate periodically. By default the daemon will renew a certificate before 2/3 of the time to expiration has elapsed. The period can be configured using the --renew-period or --expires-in flags.",
                    "type": "option"
                },
                "renew-period": {
                    "description": "The period with which to schedule renewals of the certificate in daemon mode. Requires the --daemon flag. The duration is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"1.5h\", or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "duration",
                    "type": "optional argument"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "revoke": {
            "__arguements__": {
                "serial-number": {
                    "description": "The serial number of the certificate that should be revoked. Can be left blank, either to be supplied by prompt, or when using the --cert and --key flags for revocation over mTLS.",
                    "type": "positional argument"
                },
                "cert": {
                    "description": "The file containing the cert that should be revoked.",
                    "param": "file",
                    "type": "optional argument"
                },
                "key": {
                    "description": "The file containing the key corresponding to the cert that should be revoked.",
                    "param": "file",
                    "type": "optional argument"
                },
                "reason": {
                    "description": "The string representing the reason for which the cert is being revoked.",
                    "param": "string",
                    "type": "optional argument"
                },
                "reasonCode": {
                    "description": "The reasonCode specifies the reason for revocation - chose from a list of common revocation reasons. If unset, the default is Unspecified.  reasonCode can be a number from 0-9 or a case insensitive string matching one of the following options:  Unspecified No reason given (Default -- reasonCode=0).  KeyCompromise The key is believed to have been compromised (reasonCode=1).  CACompromise The issuing Certificate Authority itself has been compromised (reasonCode=2).  AffiliationChanged The certificate contained affiliation information, for example, it may have been an EV certificate and the associated business is no longer owned by the same entity (reasonCode=3).  Superseded The certificate is being replaced (reasonCode=4).  CessationOfOperation If a CA is decommissioned, no longer to be used, the CA's certificate should be revoked with this reason code. Do not revoke the CA's certificate if the CA no longer issues new certificates, yet still publishes CRLs for the currently issued certificates (reasonCode=5).  CertificateHold A temporary revocation that indicates that a CA will not vouch for a certificate at a specific point in time. Once a certificate is revoked with a CertificateHold reason code, the certificate can then be revoked with another Reason Code, or unrevoked and returned to use (reasonCode=6).  RemoveFromCRL If a certificate is revoked with the CertificateHold reason code, it is possible to \"unrevoke\" a certificate. The unrevoking process still lists the certificate in the CRL, but with the reason code set to RemoveFromCRL. Note: This is specific to the CertificateHold reason and is only used in DeltaCRLs (reasonCode=8).  PrivilegeWithdrawn The right to represent the given entity was revoked for some reason (reasonCode=9).  AACompromise It is known or suspected that aspects of the AA validated in the attribute certificate have been compromised (reasonCode=10).",
                    "param": "reasonCode",
                    "type": "optional argument"
                },
                "token": {
                    "description": "The one-time token used to authenticate with the CA in order to create the certificate.",
                    "param": "token",
                    "type": "optional argument"
                },
                "ca-config": {
                    "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                    "param": "file",
                    "type": "optional argument"
                },
                "offline": {
                    "description": "Creates a certificate without contacting the certificate authority. Offline mode uses the configuration, certificates, and keys created with step ca init, but can accept a different configuration file using --ca-config flag.",
                    "type": "option"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "provisioner": {
            "__subcommands__": {
                "list": "list provisioners configured in the CA",
                "jwe-key": "retrieve and print a provisioning key in the CA",
                "add": "add a provisioner",
                "update": "update a provisioner",
                "remove": "remove a provisioner from the CA configuration",
                "webhook": "create and manage webhooks for a provisioner"
            },
            "__arguements__": {
                "help": {
                    "description": "show help",
                    "alt_form": "h",
                    "type": "option"
                }
            },
            "list": {
                "__arguements__": {
                    "ca-url": {
                        "description": "URI of the targeted Step Certificate Authority.",
                        "param": "URI",
                        "type": "optional argument"
                    },
                    "root": {
                        "description": "The path to the PEM file used as the root certificate authority.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "context": {
                        "description": "The context name to apply for the given command.",
                        "param": "name",
                        "type": "optional argument"
                    }
                }
            },
            "jwe-key": {
                "__arguements__": {
                    "ca-url": {
                        "description": "URI of the targeted Step Certificate Authority.",
                        "param": "URI",
                        "type": "optional argument"
                    },
                    "root": {
                        "description": "The path to the PEM file used as the root certificate authority.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "context": {
                        "description": "The context name to apply for the given command.",
                        "param": "name",
                        "type": "optional argument"
                    }
                }
            },
            "add": {
                "__arguements__": {
                    "name": {
                        "description": "The name of the provisioner.",
                        "type": "positional argument"
                    },
                    "type": {
                        "description": "The type of provisioner to create.  type is a case-insensitive string and must be one of:  JWK Uses an JWK key pair to sign provisioning tokens. (default)  OIDC Uses an OpenID Connect provider to sign provisioning tokens.  AWS Uses Amazon AWS instance identity documents.  GCP Use Google instance identity tokens.  Azure Uses Microsoft Azure identity tokens.  ACME Uses the ACME protocol to create certificates.  X5C Uses an X509 certificate / private key pair to sign provisioning tokens.  K8SSA Uses Kubernetes Service Account tokens.  SSHPOP Uses an SSH certificate / private key pair to sign provisioning tokens.  SCEP Uses the SCEP protocol to create certificates.  Nebula Uses a Nebula certificate / private key pair to sign provisioning tokens.",
                        "param": "type",
                        "type": "optional argument"
                    },
                    "public-key": {
                        "description": "The file containing the JWK public key. Or, a file containing one or more PEM formatted keys, if used with the K8SSA provisioner.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "create": {
                        "description": "Create the JWK key pair for the provisioner.",
                        "type": "option"
                    },
                    "private-key": {
                        "description": "The file containing the JWK private key.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "client-id": {
                        "description": "The id used to validate the audience in an OpenID Connect token.",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "client-secret": {
                        "description": "The secret used to obtain the OpenID Connect tokens.",
                        "param": "secret",
                        "type": "optional argument"
                    },
                    "listen-address": {
                        "description": "The callback address used in the OpenID Connect flow (e.g. \":10000\")",
                        "param": "address",
                        "type": "optional argument"
                    },
                    "configuration-endpoint": {
                        "description": "OpenID Connect configuration url.",
                        "param": "url",
                        "type": "optional argument"
                    },
                    "admin": {
                        "description": "The email of an admin user in an OpenID Connect provisioner, this user will not have restrictions in the certificates to sign. Use the '--admin' flag multiple times to configure multiple administrators.",
                        "param": "email",
                        "type": "optional argument"
                    },
                    "domain": {
                        "description": "The domain used to validate the email claim in an OpenID Connect provisioner. Use the '--domain' flag multiple times to configure multiple domains.",
                        "param": "domain",
                        "type": "optional argument"
                    },
                    "group": {
                        "description": "The group list used to validate the groups extension in an OpenID Connect token. Use the '--group' flag multiple times to configure multiple groups.",
                        "param": "group",
                        "type": "optional argument"
                    },
                    "tenant-id": {
                        "description": "The tenant-id used to replace the templatized tenantid value in the OpenID Configuration.",
                        "param": "tenant-id",
                        "type": "optional argument"
                    },
                    "x5c-roots": {
                        "description": "PEM-formatted root certificate(s) file used to validate the signature on X5C provisioning tokens.",
                        "param": "file",
                        "alt_form": "x5c-root",
                        "type": "optional argument"
                    },
                    "nebula-root": {
                        "description": "Root certificate (chain) file used to validate the signature on Nebula provisioning tokens.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "require-eab": {
                        "description": "Require (and enable) External Account Binding (EAB) for Account creation. If this flag is set to false, then disable EAB.",
                        "type": "option"
                    },
                    "force-cn": {
                        "description": "Always set the common name in provisioned certificates.",
                        "type": "option"
                    },
                    "challenge": {
                        "description": "With a SCEP provisioner the challenge is a shared secret between a client and the CA.  With an ACME provisioner, this flag specifies the challenge or challenges to enable. Use the flag multiple times to configure multiple challenges.  The supported ACME challenges are:  http-01 With the HTTP challenge, the client in an ACME transaction proves its control over a domain name by proving that it can provision HTTP resources on a server accessible under that domain name.  dns-01 With the DNS challenge, the client can prove control of a domain by provisioning a TXT resource record containing a designated value for a specific validation domain name.  tls-alpn-01 With the TLS with Application-Layer Protocol Negotiation (TLS ALPN) challenge, the client can prove control over a domain name by configuring a TLS server to respond to specific connection attempts using the ALPN extension with identifying information.  device-attest-01 With the device attestation challenge, the client can prove control over a permanent identifier of a device by providing an attestation statement containing the identifier of the device.  If the provisioner has no challenges configured, http-01, dns-01 and tls-alpn-01 will be automatically enabled.",
                        "param": "challenge",
                        "type": "optional argument"
                    },
                    "attestation-format": {
                        "description": "Enable an ACME attestation statement format in the provisioner. Use the flag multiple times to configure multiple challenges.  The supported ACME attestation formats are:  apple With the apple format, Apple devices can use the device-attest-01 challenge to get a new certificate.  step With the step format, devices like YubiKeys that can generate an attestation certificate can use the device-attest-01 challenge to get a new certificate.  tpm With the tpm format, devices with TPMs can use the device-attest-01 challenge to get a new certificate.",
                        "param": "format",
                        "type": "optional argument"
                    },
                    "attestation-roots": {
                        "description": "PEM-formatted root certificate(s) file used to validate the attestation certificates. Use the flag multiple times to read from multiple files.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "capabilities": {
                        "description": "The SCEP capabilities to advertise",
                        "param": "capabilities",
                        "type": "optional argument"
                    },
                    "include-root": {
                        "description": "Include the CA root certificate in the SCEP CA certificate chain",
                        "type": "option"
                    },
                    "min-public-key-length": {
                        "description": "The minimum public key length of the SCEP RSA encryption key",
                        "param": "length",
                        "type": "optional argument"
                    },
                    "encryption-algorithm-identifier": {
                        "description": "The id for the SCEP encryption algorithm to use. Valid values are 0 - 4, inclusive. The values correspond to: 0: DES-CBC, 1: AES-128-CBC, 2: AES-256-CBC, 3: AES-128-GCM, 4: AES-256-GCM. Defaults to DES-CBC (0) for legacy clients.",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "aws-account": {
                        "description": "The AWS account id used to validate the identity documents. Use the flag multiple times to configure multiple accounts.",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "azure-tenant": {
                        "description": "The Microsoft Azure tenant id used to validate the identity tokens.",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "azure-resource-group": {
                        "description": "The Microsoft Azure resource group name used to validate the identity tokens. Use the flag multiple times to configure multiple resource groups",
                        "param": "name",
                        "type": "optional argument"
                    },
                    "azure-audience": {
                        "description": "The Microsoft Azure audience name used to validate the identity tokens.",
                        "param": "name",
                        "type": "optional argument"
                    },
                    "azure-subscription-id": {
                        "description": "The Microsoft Azure subscription id used to validate the identity tokens. Use the flag multiple times to configure multiple subscription IDs",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "azure-object-id": {
                        "description": "The Microsoft Azure AD object id used to validate the identity tokens. Use the flag multiple times to configure multiple object IDs",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "gcp-service-account": {
                        "description": "The Google service account email or id used to validate the identity tokens. Use the flag multiple times to configure multiple service accounts.",
                        "param": "email",
                        "type": "optional argument"
                    },
                    "gcp-project": {
                        "description": "The Google project id used to validate the identity tokens. Use the flag multiple times to configure multiple projects",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "instance-age": {
                        "description": "The maximum duration to grant a certificate in AWS and GCP provisioners. A duration is sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "disable-custom-sans": {
                        "description": "On cloud provisioners, if enabled only the internal DNS and IP will be added as a SAN. By default it will accept any SAN in the CSR.",
                        "type": "option"
                    },
                    "disable-trust-on-first-use": {
                        "description": "On cloud provisioners, if enabled multiple sign request for this provisioner with the same instance will be accepted. By default only the first request will be accepted.",
                        "alt_form": "disable-tofu",
                        "type": "option"
                    },
                    "x509-template": {
                        "description": "The x509 certificate template file, a JSON representation of the certificate to create.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "x509-template-data": {
                        "description": "The x509 certificate template data file, a JSON map of data that can be used by the certificate template.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "ssh-template": {
                        "description": "The x509 certificate template file, a JSON representation of the certificate to create.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "ssh-template-data": {
                        "description": "The ssh certificate template data file, a JSON map of data that can be used by the certificate template.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "x509-min-dur": {
                        "description": "The minimum duration for an x509 certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "x509-max-dur": {
                        "description": "The maximum duration for an x509 certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "x509-default-dur": {
                        "description": "The default duration for an x509 certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "ssh-user-min-dur": {
                        "description": "The minimum duration for an ssh user certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "ssh-user-max-dur": {
                        "description": "The maximum duration for an ssh user certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "ssh-user-default-dur": {
                        "description": "The maximum duration for an ssh user certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "ssh-host-min-dur": {
                        "description": "The minimum duration for an ssh host certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "ssh-host-max-dur": {
                        "description": "The maximum duration for an ssh host certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "ssh-host-default-dur": {
                        "description": "The maximum duration for an ssh host certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "disable-renewal": {
                        "description": "Disable renewal for all certificates generated by this provisioner.",
                        "type": "option"
                    },
                    "allow-renewal-after-expiry": {
                        "description": "Allow renewals for expired certificates generated by this provisioner.",
                        "type": "option"
                    },
                    "ssh": {
                        "description": "Enable provisioning of ssh certificates. The default value is true. To disable ssh use '--ssh=false'.",
                        "type": "option"
                    },
                    "admin-cert": {
                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                        "param": "chain",
                        "type": "optional argument"
                    },
                    "admin-key": {
                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "admin-subject": {
                        "description": "The admin subject to use for generating admin credentials.",
                        "param": "subject",
                        "alt_form": "admin-name",
                        "type": "optional argument"
                    },
                    "admin-provisioner": {
                        "description": "The provisioner name to use for generating admin credentials.",
                        "param": "name",
                        "alt_form": "admin-issuer",
                        "type": "optional argument"
                    },
                    "admin-password-file": {
                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "password-file": {
                        "description": "The path to the file containing the password to encrypt or decrypt the private key.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "ca-url": {
                        "description": "URI of the targeted Step Certificate Authority.",
                        "param": "URI",
                        "type": "optional argument"
                    },
                    "root": {
                        "description": "The path to the PEM file used as the root certificate authority.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "context": {
                        "description": "The context name to apply for the given command.",
                        "param": "name",
                        "type": "optional argument"
                    },
                    "ca-config": {
                        "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                        "param": "file",
                        "type": "optional argument"
                    }
                }
            },
            "update": {
                "__arguements__": {
                    "name": {
                        "description": "The new name for the provisioner.",
                        "param": "name",
                        "type": "optional argument"
                    },
                    "public-key": {
                        "description": "The file containing the JWK public key. Or, a file containing one or more PEM formatted keys, if used with the K8SSA provisioner.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "create": {
                        "description": "Create the JWK key pair for the provisioner.",
                        "type": "option"
                    },
                    "private-key": {
                        "description": "The file containing the JWK private key.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "client-id": {
                        "description": "The id used to validate the audience in an OpenID Connect token.",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "client-secret": {
                        "description": "The secret used to obtain the OpenID Connect tokens.",
                        "param": "secret",
                        "type": "optional argument"
                    },
                    "listen-address": {
                        "description": "The callback address used in the OpenID Connect flow (e.g. \":10000\")",
                        "param": "address",
                        "type": "optional argument"
                    },
                    "configuration-endpoint": {
                        "description": "OpenID Connect configuration url.",
                        "param": "url",
                        "type": "optional argument"
                    },
                    "admin": {
                        "description": "The email of an admin user in an OpenID Connect provisioner, this user will not have restrictions in the certificates to sign. Use the '--admin' flag multiple times to configure multiple administrators.",
                        "param": "email",
                        "type": "optional argument"
                    },
                    "remove-admin": {
                        "description": "Remove the email of an admin user in an OpenID Connect provisioner, this user will not have restrictions in the certificates to sign. Use the '--remove-admin' flag multiple times to remove multiple administrators.",
                        "param": "email",
                        "type": "optional argument"
                    },
                    "domain": {
                        "description": "The domain used to validate the email claim in an OpenID Connect provisioner. Use the '--domain' flag multiple times to configure multiple domains.",
                        "param": "domain",
                        "type": "optional argument"
                    },
                    "remove-domain": {
                        "description": "Remove the domain used to validate the email claim in an OpenID Connect provisioner. Use the '--remove-domain' flag multiple times to remove multiple domains.",
                        "param": "domain",
                        "type": "optional argument"
                    },
                    "group": {
                        "description": "The group list used to validate the groups extension in an OpenID Connect token. Use the '--group' flag multiple times to configure multiple groups.",
                        "param": "group",
                        "type": "optional argument"
                    },
                    "tenant-id": {
                        "description": "The tenant-id used to replace the templatized tenantid value in the OpenID Configuration.",
                        "param": "tenant-id",
                        "type": "optional argument"
                    },
                    "x5c-roots": {
                        "description": "PEM-formatted root certificate(s) file used to validate the signature on X5C provisioning tokens.",
                        "param": "file",
                        "alt_form": "x5c-root",
                        "type": "optional argument"
                    },
                    "nebula-root": {
                        "description": "Root certificate (chain) file used to validate the signature on Nebula provisioning tokens.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "require-eab": {
                        "description": "Require (and enable) External Account Binding (EAB) for Account creation. If this flag is set to false, then disable EAB.",
                        "type": "option"
                    },
                    "force-cn": {
                        "description": "Always set the common name in provisioned certificates.",
                        "type": "option"
                    },
                    "challenge": {
                        "description": "With a SCEP provisioner the challenge is a shared secret between a client and the CA.  With an ACME provisioner, this flag specifies the challenge or challenges to enable. Use the flag multiple times to configure multiple challenges.  The supported ACME challenges are:  http-01 With the HTTP challenge, the client in an ACME transaction proves its control over a domain name by proving that it can provision HTTP resources on a server accessible under that domain name.  dns-01 With the DNS challenge, the client can prove control of a domain by provisioning a TXT resource record containing a designated value for a specific validation domain name.  tls-alpn-01 With the TLS with Application-Layer Protocol Negotiation (TLS ALPN) challenge, the client can prove control over a domain name by configuring a TLS server to respond to specific connection attempts using the ALPN extension with identifying information.  device-attest-01 With the device attestation challenge, the client can prove control over a permanent identifier of a device by providing an attestation statement containing the identifier of the device.  If the provisioner has no challenges configured, http-01, dns-01 and tls-alpn-01 will be automatically enabled.",
                        "param": "challenge",
                        "type": "optional argument"
                    },
                    "remove-challenge": {
                        "description": "Remove an ACME challenge from the list configured in the provisioner. Use the flag multiple times to remove multiple challenges.",
                        "param": "challenge",
                        "type": "optional argument"
                    },
                    "attestation-format": {
                        "description": "Enable an ACME attestation statement format in the provisioner. Use the flag multiple times to configure multiple challenges.  The supported ACME attestation formats are:  apple With the apple format, Apple devices can use the device-attest-01 challenge to get a new certificate.  step With the step format, devices like YubiKeys that can generate an attestation certificate can use the device-attest-01 challenge to get a new certificate.  tpm With the tpm format, devices with TPMs can use the device-attest-01 challenge to get a new certificate.",
                        "param": "format",
                        "type": "optional argument"
                    },
                    "remove-attestation-format": {
                        "description": "Remove an ACME attestation statement format from the list configured in the provisioner. Use the flag multiple times to remove multiple formats.",
                        "param": "format",
                        "type": "optional argument"
                    },
                    "attestation-roots": {
                        "description": "PEM-formatted root certificate(s) file used to validate the attestation certificates. Use the flag multiple times to read from multiple files.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "capabilities": {
                        "description": "The SCEP capabilities to advertise",
                        "param": "capabilities",
                        "type": "optional argument"
                    },
                    "include-root": {
                        "description": "Include the CA root certificate in the SCEP CA certificate chain",
                        "type": "option"
                    },
                    "min-public-key-length": {
                        "description": "The minimum public key length of the SCEP RSA encryption key",
                        "param": "length",
                        "type": "optional argument"
                    },
                    "encryption-algorithm-identifier": {
                        "description": "The id for the SCEP encryption algorithm to use. Valid values are 0 - 4, inclusive. The values correspond to: 0: DES-CBC, 1: AES-128-CBC, 2: AES-256-CBC, 3: AES-128-GCM, 4: AES-256-GCM. Defaults to DES-CBC (0) for legacy clients.",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "aws-account": {
                        "description": "The AWS account id used to validate the identity documents. Use the flag multiple times to configure multiple accounts.",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "remove-aws-account": {
                        "description": "Remove an AWS account id used to validate the identity documents. Use the flag multiple times to remove multiple accounts.",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "azure-tenant": {
                        "description": "The Microsoft Azure tenant id used to validate the identity tokens.",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "azure-resource-group": {
                        "description": "The Microsoft Azure resource group name used to validate the identity tokens. Use the flag multiple times to configure multiple resource groups",
                        "param": "name",
                        "type": "optional argument"
                    },
                    "remove-azure-resource-group": {
                        "description": "Remove a Microsoft Azure resource group name used to validate the identity tokens. Use the flag multiple times to configure multiple resource groups",
                        "param": "name",
                        "type": "optional argument"
                    },
                    "azure-audience": {
                        "description": "The Microsoft Azure audience name used to validate the identity tokens.",
                        "param": "name",
                        "type": "optional argument"
                    },
                    "azure-subscription-id": {
                        "description": "The Microsoft Azure subscription id used to validate the identity tokens. Use the flag multiple times to configure multiple subscription IDs",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "remove-azure-subscription-id": {
                        "description": "Remove a Microsoft Azure subscription id used to validate the identity tokens. Use the flag multiple times to configure multiple subscription IDs",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "azure-object-id": {
                        "description": "The Microsoft Azure AD object id used to validate the identity tokens. Use the flag multiple times to configure multiple object IDs",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "remove-azure-object-id": {
                        "description": "Remove a Microsoft Azure AD object id used to validate the identity tokens. Use the flag multiple times to remove multiple object IDs",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "gcp-service-account": {
                        "description": "The Google service account email or id used to validate the identity tokens. Use the flag multiple times to configure multiple service accounts.",
                        "param": "email",
                        "type": "optional argument"
                    },
                    "remove-gcp-service-account": {
                        "description": "Remove a Google service account email or id used to validate the identity tokens. Use the flag multiple times to remove multiple service accounts.",
                        "param": "email",
                        "type": "optional argument"
                    },
                    "gcp-project": {
                        "description": "The Google project id used to validate the identity tokens. Use the flag multiple times to configure multiple projects",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "remove-gcp-project": {
                        "description": "Remove a Google project id used to validate the identity tokens. Use the flag multiple times to remove multiple projects",
                        "param": "id",
                        "type": "optional argument"
                    },
                    "instance-age": {
                        "description": "The maximum duration to grant a certificate in AWS and GCP provisioners. A duration is sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "disable-custom-sans": {
                        "description": "On cloud provisioners, if enabled only the internal DNS and IP will be added as a SAN. By default it will accept any SAN in the CSR.",
                        "type": "option"
                    },
                    "disable-trust-on-first-use": {
                        "description": "On cloud provisioners, if enabled multiple sign request for this provisioner with the same instance will be accepted. By default only the first request will be accepted.",
                        "alt_form": "disable-tofu",
                        "type": "option"
                    },
                    "x509-template": {
                        "description": "The x509 certificate template file, a JSON representation of the certificate to create.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "x509-template-data": {
                        "description": "The x509 certificate template data file, a JSON map of data that can be used by the certificate template.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "ssh-template": {
                        "description": "The x509 certificate template file, a JSON representation of the certificate to create.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "ssh-template-data": {
                        "description": "The ssh certificate template data file, a JSON map of data that can be used by the certificate template.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "x509-min-dur": {
                        "description": "The minimum duration for an x509 certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "x509-max-dur": {
                        "description": "The maximum duration for an x509 certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "x509-default-dur": {
                        "description": "The default duration for an x509 certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "ssh-user-min-dur": {
                        "description": "The minimum duration for an ssh user certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "ssh-user-max-dur": {
                        "description": "The maximum duration for an ssh user certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "ssh-user-default-dur": {
                        "description": "The maximum duration for an ssh user certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "ssh-host-min-dur": {
                        "description": "The minimum duration for an ssh host certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "ssh-host-max-dur": {
                        "description": "The maximum duration for an ssh host certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "ssh-host-default-dur": {
                        "description": "The maximum duration for an ssh host certificate generated by this provisioner. Value must be a sequence of decimal numbers, each with optional fraction, and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                        "param": "duration",
                        "type": "optional argument"
                    },
                    "disable-renewal": {
                        "description": "Disable renewal for all certificates generated by this provisioner.",
                        "type": "option"
                    },
                    "allow-renewal-after-expiry": {
                        "description": "Allow renewals for expired certificates generated by this provisioner.",
                        "type": "option"
                    },
                    "ssh": {
                        "description": "Enable provisioning of ssh certificates. The default value is true. To disable ssh use '--ssh=false'.",
                        "type": "option"
                    },
                    "admin-cert": {
                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                        "param": "chain",
                        "type": "optional argument"
                    },
                    "admin-key": {
                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "admin-subject": {
                        "description": "The admin subject to use for generating admin credentials.",
                        "param": "subject",
                        "alt_form": "admin-name",
                        "type": "optional argument"
                    },
                    "admin-provisioner": {
                        "description": "The provisioner name to use for generating admin credentials.",
                        "param": "name",
                        "alt_form": "admin-issuer",
                        "type": "optional argument"
                    },
                    "admin-password-file": {
                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "password-file": {
                        "description": "The path to the file containing the password to encrypt or decrypt the private key.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "ca-url": {
                        "description": "URI of the targeted Step Certificate Authority.",
                        "param": "URI",
                        "type": "optional argument"
                    },
                    "root": {
                        "description": "The path to the PEM file used as the root certificate authority.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "context": {
                        "description": "The context name to apply for the given command.",
                        "param": "name",
                        "type": "optional argument"
                    },
                    "ca-config": {
                        "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                        "param": "file",
                        "type": "optional argument"
                    }
                }
            },
            "remove": {
                "__arguements__": {
                    "admin-cert": {
                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                        "param": "chain",
                        "type": "optional argument"
                    },
                    "admin-key": {
                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "admin-subject": {
                        "description": "The admin subject to use for generating admin credentials.",
                        "param": "subject",
                        "alt_form": "admin-name",
                        "type": "optional argument"
                    },
                    "admin-provisioner": {
                        "description": "The provisioner name to use for generating admin credentials.",
                        "param": "name",
                        "alt_form": "admin-issuer",
                        "type": "optional argument"
                    },
                    "admin-password-file": {
                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                        "param": "file",
                        "alt_form": "password-file",
                        "type": "optional argument"
                    },
                    "ca-url": {
                        "description": "URI of the targeted Step Certificate Authority.",
                        "param": "URI",
                        "type": "optional argument"
                    },
                    "root": {
                        "description": "The path to the PEM file used as the root certificate authority.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "context": {
                        "description": "The context name to apply for the given command.",
                        "param": "name",
                        "type": "optional argument"
                    },
                    "ca-config": {
                        "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                        "param": "file",
                        "type": "optional argument"
                    }
                }
            },
            "webhook": {
                "__subcommands__": {
                    "add": "add a webhook to a provisioner",
                    "update": "update a webhook attached to a provisioner",
                    "remove": "remove a webhook from a provisioner"
                },
                "__arguements__": {
                    "help": {
                        "description": "show help",
                        "alt_form": "h",
                        "type": "option"
                    }
                },
                "add": {
                    "__arguements__": {
                        "provisioner_name": {
                            "description": "The name of the provisioner.",
                            "type": "positional argument"
                        },
                        "webhook_name": {
                            "description": "The name of the webhook.",
                            "type": "positional argument"
                        },
                        "url": {
                            "description": "The url of the webhook server.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "kind": {
                            "description": "The kind of webhook. Default is ENRICHING.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "bearer-token-file": {
                            "description": "The token to be set in the Authorization header of the request to the webhook server.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "basic-auth-username": {
                            "description": "The username portion of the Authorization header of the request to the webhook server when using basic authentication.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "basic-auth-password-file": {
                            "description": "The password porition of the Authorization header of the request to the webhook server when using basic authentication.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "disable-tls-client-auth": {
                            "description": "The CA will not send a client certificate when requested by the webhook server.",
                            "type": "option"
                        },
                        "cert-type": {
                            "description": "Whether to call this webhook when signing X509 certificates, SSH certificates, or ALL certificates. Default is ALL.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "admin-cert": {
                            "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                            "param": "chain",
                            "type": "optional argument"
                        },
                        "admin-key": {
                            "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "admin-subject": {
                            "description": "The admin subject to use for generating admin credentials.",
                            "param": "subject",
                            "alt_form": "admin-name",
                            "type": "optional argument"
                        },
                        "admin-provisioner": {
                            "description": "The provisioner name to use for generating admin credentials.",
                            "param": "name",
                            "alt_form": "admin-issuer",
                            "type": "optional argument"
                        },
                        "admin-password-file": {
                            "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                            "param": "file",
                            "alt_form": "password-file",
                            "type": "optional argument"
                        },
                        "ca-url": {
                            "description": "URI of the targeted Step Certificate Authority.",
                            "param": "URI",
                            "type": "optional argument"
                        },
                        "root": {
                            "description": "The path to the PEM file used as the root certificate authority.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "context": {
                            "description": "The context name to apply for the given command.",
                            "param": "name",
                            "type": "optional argument"
                        },
                        "ca-config": {
                            "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                            "param": "file",
                            "type": "optional argument"
                        }
                    }
                },
                "update": {
                    "__arguements__": {
                        "provisioner_name": {
                            "description": "The name of the provisioner.",
                            "type": "positional argument"
                        },
                        "webhook_name": {
                            "description": "The name of the webhook.",
                            "type": "positional argument"
                        },
                        "url": {
                            "description": "The url of the webhook server.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "kind": {
                            "description": "The kind of webhook. Default is ENRICHING.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "bearer-token-file": {
                            "description": "The token to be set in the Authorization header of the request to the webhook server.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "basic-auth-username": {
                            "description": "The username portion of the Authorization header of the request to the webhook server when using basic authentication.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "basic-auth-password-file": {
                            "description": "The password porition of the Authorization header of the request to the webhook server when using basic authentication.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "disable-tls-client-auth": {
                            "description": "The CA will not send a client certificate when requested by the webhook server.",
                            "type": "option"
                        },
                        "cert-type": {
                            "description": "Whether to call this webhook when signing X509 certificates, SSH certificates, or ALL certificates. Default is ALL.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "admin-cert": {
                            "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                            "param": "chain",
                            "type": "optional argument"
                        },
                        "admin-key": {
                            "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "admin-subject": {
                            "description": "The admin subject to use for generating admin credentials.",
                            "param": "subject",
                            "alt_form": "admin-name",
                            "type": "optional argument"
                        },
                        "admin-provisioner": {
                            "description": "The provisioner name to use for generating admin credentials.",
                            "param": "name",
                            "alt_form": "admin-issuer",
                            "type": "optional argument"
                        },
                        "admin-password-file": {
                            "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                            "param": "file",
                            "alt_form": "password-file",
                            "type": "optional argument"
                        },
                        "ca-url": {
                            "description": "URI of the targeted Step Certificate Authority.",
                            "param": "URI",
                            "type": "optional argument"
                        },
                        "root": {
                            "description": "The path to the PEM file used as the root certificate authority.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "context": {
                            "description": "The context name to apply for the given command.",
                            "param": "name",
                            "type": "optional argument"
                        },
                        "ca-config": {
                            "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                            "param": "file",
                            "type": "optional argument"
                        }
                    }
                },
                "remove": {
                    "__arguements__": {
                        "provisioner_name": {
                            "description": "The name of the provisioner.",
                            "type": "positional argument"
                        },
                        "webhook_name": {
                            "description": "The name of the webhook.",
                            "type": "positional argument"
                        },
                        "admin-cert": {
                            "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                            "param": "chain",
                            "type": "optional argument"
                        },
                        "admin-key": {
                            "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "admin-subject": {
                            "description": "The admin subject to use for generating admin credentials.",
                            "param": "subject",
                            "alt_form": "admin-name",
                            "type": "optional argument"
                        },
                        "admin-provisioner": {
                            "description": "The provisioner name to use for generating admin credentials.",
                            "param": "name",
                            "alt_form": "admin-issuer",
                            "type": "optional argument"
                        },
                        "admin-password-file": {
                            "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                            "param": "file",
                            "alt_form": "password-file",
                            "type": "optional argument"
                        },
                        "ca-url": {
                            "description": "URI of the targeted Step Certificate Authority.",
                            "param": "URI",
                            "type": "optional argument"
                        },
                        "root": {
                            "description": "The path to the PEM file used as the root certificate authority.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "context": {
                            "description": "The context name to apply for the given command.",
                            "param": "name",
                            "type": "optional argument"
                        },
                        "ca-config": {
                            "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                            "param": "file",
                            "type": "optional argument"
                        }
                    }
                }
            }
        },
        "sign": {
            "__arguements__": {
                "csr-file": {
                    "description": "File with the certificate signing request (PEM format)",
                    "type": "positional argument"
                },
                "crt-file": {
                    "description": "File to write the certificate (PEM format)",
                    "type": "positional argument"
                },
                "token": {
                    "description": "The one-time token used to authenticate with the CA in order to create the certificate.",
                    "param": "token",
                    "type": "optional argument"
                },
                "provisioner": {
                    "description": "The provisioner name to use.",
                    "param": "name",
                    "alt_form": "issuer",
                    "type": "optional argument"
                },
                "provisioner-password-file": {
                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "not-before": {
                    "description": "The time|duration when the certificate validity period starts. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "time|duration",
                    "type": "optional argument"
                },
                "not-after": {
                    "description": "The time|duration when the certificate validity period ends. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "time|duration",
                    "type": "optional argument"
                },
                "set": {
                    "description": "The key=value pair with template data variables. Use the --set flag multiple times to add multiple variables.",
                    "param": "key",
                    "type": "optional argument"
                },
                "set-file": {
                    "description": "The JSON file with the template data variables.",
                    "param": "file",
                    "type": "optional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "offline": {
                    "description": "Creates a certificate without contacting the certificate authority. Offline mode uses the configuration, certificates, and keys created with step ca init, but can accept a different configuration file using --ca-config flag.",
                    "type": "option"
                },
                "password-file": {
                    "description": "The path to the file containing the password to encrypt or decrypt the private key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "console": {
                    "description": "Complete the flow while remaining inside the terminal",
                    "type": "option"
                },
                "kms": {
                    "description": "The uri to configure a Cloud KMS or an HSM.",
                    "param": "uri",
                    "type": "optional argument"
                },
                "x5c-cert": {
                    "description": "Certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                    "param": "chain",
                    "type": "optional argument"
                },
                "x5c-key": {
                    "description": "Private key file, used to sign a JWT, corresponding to the certificate that will be stored in the 'x5c' header.",
                    "param": "file",
                    "type": "optional argument"
                },
                "x5c-chain": {
                    "description": "Certificate file, in PEM format",
                    "param": "file",
                    "type": "optional argument"
                },
                "nebula-cert": {
                    "description": "Certificate file in PEM format to store in the 'nebula' header of a JWT.",
                    "param": "file",
                    "type": "optional argument"
                },
                "nebula-key": {
                    "description": "Private key file, used to sign a JWT, corresponding to the certificate that will be stored in the 'nebula' header.",
                    "param": "file",
                    "type": "optional argument"
                },
                "acme": {
                    "description": "ACME directory url to be used for requesting certificates via the ACME protocol. Use this flag to define an ACME server other than the Step CA. If this flag is absent and an ACME provisioner has been selected then the '--ca-url' flag must be defined.",
                    "param": "url",
                    "type": "optional argument"
                },
                "standalone": {
                    "description": "Get a certificate using the ACME protocol and standalone mode for validation. Standalone is a mode in which the step process will run a server that will will respond to ACME challenge validation requests. Standalone is the default mode for serving challenge validation requests.",
                    "type": "option"
                },
                "webroot": {
                    "description": "Specify a file to use as a 'web root' for validation in the ACME protocol. Webroot is a mode in which the step process will write a challenge file to a location being served by an existing fileserver in order to respond to ACME challenge validation requests.",
                    "param": "file",
                    "type": "optional argument"
                },
                "contact": {
                    "description": "The email-address used for contact as part of the ACME protocol. These contacts may be used to warn of certificate expiration or other certificate lifetime events. Use the '--contact' flag multiple times to configure multiple contacts.",
                    "param": "email-address",
                    "type": "optional argument"
                },
                "http-listen": {
                    "description": "Use a non-standard http address, behind a reverse proxy or load balancer, for serving ACME challenges. The default address is :80, which requires super user (sudo) privileges. This flag must be used in conjunction with the '--standalone' flag.",
                    "param": "address",
                    "type": "optional argument"
                },
                "k8ssa-token-path": {
                    "description": "Configure the file from which to read the kubernetes service account token.",
                    "param": "file",
                    "type": "optional argument"
                },
                "ca-config": {
                    "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                    "param": "file",
                    "type": "optional argument"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "root": {
            "__arguements__": {
                "root-file": {
                    "description": "File to write root certificate (PEM format)",
                    "type": "positional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "fingerprint": {
                    "description": "The fingerprint of the targeted root certificate.",
                    "param": "fingerprint",
                    "type": "optional argument"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "roots": {
            "__arguements__": {
                "roots-file": {
                    "description": "File to write all the root certificates (PEM format)",
                    "type": "positional argument"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "federation": {
            "__arguements__": {
                "federation-file": {
                    "description": "File to write federation certificates (PEM format)",
                    "type": "positional argument"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "acme": {
            "__subcommands__": {
                "eab": "create and manage ACME External Account Binding Keys"
            },
            "__arguements__": {
                "help": {
                    "description": "show help",
                    "alt_form": "h",
                    "type": "option"
                }
            },
            "eab": {
                "__subcommands__": {
                    "list": "list all ACME External Account Binding Keys",
                    "add": "add ACME External Account Binding Key",
                    "remove": "remove an ACME EAB Key from the CA"
                },
                "__arguements__": {
                    "help": {
                        "description": "show help",
                        "alt_form": "h",
                        "type": "option"
                    }
                },
                "list": {
                    "__arguements__": {
                        "provisioner": {
                            "description": "Name of the provisioner to list ACME EAB keys for",
                            "type": "positional argument"
                        },
                        "eab-key-reference": {
                            "description": "(Optional) reference (from external system) for the key to be listed",
                            "type": "positional argument"
                        },
                        "limit": {
                            "description": "The number of entities to return per (paging) API request.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "no-pager": {
                            "description": "Disables usage of $PAGER for paging purposes",
                            "type": "option"
                        },
                        "admin-cert": {
                            "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                            "param": "chain",
                            "type": "optional argument"
                        },
                        "admin-key": {
                            "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "admin-subject": {
                            "description": "The admin subject to use for generating admin credentials.",
                            "param": "subject",
                            "alt_form": "admin-name",
                            "type": "optional argument"
                        },
                        "admin-provisioner": {
                            "description": "The provisioner name to use for generating admin credentials.",
                            "param": "name",
                            "alt_form": "admin-issuer",
                            "type": "optional argument"
                        },
                        "admin-password-file": {
                            "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                            "param": "file",
                            "alt_form": "password-file",
                            "type": "optional argument"
                        },
                        "ca-url": {
                            "description": "URI of the targeted Step Certificate Authority.",
                            "param": "URI",
                            "type": "optional argument"
                        },
                        "root": {
                            "description": "The path to the PEM file used as the root certificate authority.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "context": {
                            "description": "The context name to apply for the given command.",
                            "param": "name",
                            "type": "optional argument"
                        }
                    }
                },
                "add": {
                    "__arguements__": {
                        "provisioner": {
                            "description": "Name of the provisioner to which the ACME EAB key will be added",
                            "type": "positional argument"
                        },
                        "eab-key-reference": {
                            "description": "(Optional) reference (from external system) for the key that will be added",
                            "type": "positional argument"
                        },
                        "admin-cert": {
                            "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                            "param": "chain",
                            "type": "optional argument"
                        },
                        "admin-key": {
                            "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "admin-subject": {
                            "description": "The admin subject to use for generating admin credentials.",
                            "param": "subject",
                            "alt_form": "admin-name",
                            "type": "optional argument"
                        },
                        "admin-provisioner": {
                            "description": "The provisioner name to use for generating admin credentials.",
                            "param": "name",
                            "alt_form": "admin-issuer",
                            "type": "optional argument"
                        },
                        "admin-password-file": {
                            "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                            "param": "file",
                            "alt_form": "password-file",
                            "type": "optional argument"
                        },
                        "ca-url": {
                            "description": "URI of the targeted Step Certificate Authority.",
                            "param": "URI",
                            "type": "optional argument"
                        },
                        "root": {
                            "description": "The path to the PEM file used as the root certificate authority.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "context": {
                            "description": "The context name to apply for the given command.",
                            "param": "name",
                            "type": "optional argument"
                        }
                    }
                },
                "remove": {
                    "__arguements__": {
                        "provisioner": {
                            "description": "Name of the provisioner to remove an ACME EAB key for",
                            "type": "positional argument"
                        },
                        "eab-key-id": {
                            "description": "The ACME EAB Key ID to remove",
                            "type": "positional argument"
                        },
                        "admin-cert": {
                            "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                            "param": "chain",
                            "type": "optional argument"
                        },
                        "admin-key": {
                            "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "admin-subject": {
                            "description": "The admin subject to use for generating admin credentials.",
                            "param": "subject",
                            "alt_form": "admin-name",
                            "type": "optional argument"
                        },
                        "admin-provisioner": {
                            "description": "The provisioner name to use for generating admin credentials.",
                            "param": "name",
                            "alt_form": "admin-issuer",
                            "type": "optional argument"
                        },
                        "admin-password-file": {
                            "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                            "param": "file",
                            "alt_form": "password-file",
                            "type": "optional argument"
                        },
                        "ca-url": {
                            "description": "URI of the targeted Step Certificate Authority.",
                            "param": "URI",
                            "type": "optional argument"
                        },
                        "root": {
                            "description": "The path to the PEM file used as the root certificate authority.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "context": {
                            "description": "The context name to apply for the given command.",
                            "param": "name",
                            "type": "optional argument"
                        }
                    }
                }
            }
        },
        "policy": {
            "__subcommands__": {
                "authority": "manage certificate issuance policies for authorities",
                "provisioner": "manage certificate issuance policies for provisioners",
                "acme": "manage certificate issuance policies for ACME accounts."
            },
            "__arguements__": {
                "help": {
                    "description": "show help",
                    "alt_form": "h",
                    "type": "option"
                }
            },
            "authority": {
                "__subcommands__": {
                    "view": "view current certificate issuance policy",
                    "remove": "remove certificate issuance policy",
                    "x509": "manage X.509 certificate issuance policies",
                    "ssh": "manage SSH certificate issuance policies"
                },
                "__arguements__": {
                    "help": {
                        "description": "show help",
                        "alt_form": "h",
                        "type": "option"
                    }
                },
                "view": {
                    "__arguements__": {
                        "provisioner": {
                            "description": "The provisioner name",
                            "param": "name",
                            "type": "optional argument"
                        },
                        "eab-key-id": {
                            "description": "An ACME EAB Key ID.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "eab-key-reference": {
                            "description": "An ACME EAB Key Reference.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "admin-cert": {
                            "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                            "param": "chain",
                            "type": "optional argument"
                        },
                        "admin-key": {
                            "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "admin-subject": {
                            "description": "The admin subject to use for generating admin credentials.",
                            "param": "subject",
                            "alt_form": "admin-name",
                            "type": "optional argument"
                        },
                        "admin-provisioner": {
                            "description": "The provisioner name to use for generating admin credentials.",
                            "param": "name",
                            "alt_form": "admin-issuer",
                            "type": "optional argument"
                        },
                        "admin-password-file": {
                            "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                            "param": "file",
                            "alt_form": "password-file",
                            "type": "optional argument"
                        },
                        "ca-url": {
                            "description": "URI of the targeted Step Certificate Authority.",
                            "param": "URI",
                            "type": "optional argument"
                        },
                        "root": {
                            "description": "The path to the PEM file used as the root certificate authority.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "context": {
                            "description": "The context name to apply for the given command.",
                            "param": "name",
                            "type": "optional argument"
                        }
                    }
                },
                "remove": {
                    "__arguements__": {
                        "provisioner": {
                            "description": "The provisioner name",
                            "param": "name",
                            "type": "optional argument"
                        },
                        "eab-key-id": {
                            "description": "An ACME EAB Key ID.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "eab-key-reference": {
                            "description": "An ACME EAB Key Reference.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "admin-cert": {
                            "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                            "param": "chain",
                            "type": "optional argument"
                        },
                        "admin-key": {
                            "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "admin-subject": {
                            "description": "The admin subject to use for generating admin credentials.",
                            "param": "subject",
                            "alt_form": "admin-name",
                            "type": "optional argument"
                        },
                        "admin-provisioner": {
                            "description": "The provisioner name to use for generating admin credentials.",
                            "param": "name",
                            "alt_form": "admin-issuer",
                            "type": "optional argument"
                        },
                        "admin-password-file": {
                            "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                            "param": "file",
                            "alt_form": "password-file",
                            "type": "optional argument"
                        },
                        "ca-url": {
                            "description": "URI of the targeted Step Certificate Authority.",
                            "param": "URI",
                            "type": "optional argument"
                        },
                        "root": {
                            "description": "The path to the PEM file used as the root certificate authority.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "context": {
                            "description": "The context name to apply for the given command.",
                            "param": "name",
                            "type": "optional argument"
                        }
                    }
                },
                "x509": {
                    "__subcommands__": {
                        "allow": "manage allowed names for X.509 certificate issuance policies",
                        "deny": "manage denied names for X.509 certificate issuance policies",
                        "wildcards": "manage wildcard name settings for X.509 certificate issuance policies"
                    },
                    "__arguements__": {
                        "help": {
                            "description": "show help",
                            "alt_form": "h",
                            "type": "option"
                        }
                    },
                    "allow": {
                        "__subcommands__": {
                            "cn": "add or remove common names",
                            "dns": "add or remove DNS domains",
                            "email": "add or remove email addresses",
                            "ip": "add or remove ip addresses",
                            "uri": "add or remove URI domains"
                        },
                        "__arguements__": {
                            "help": {
                                "description": "show help",
                                "alt_form": "h",
                                "type": "option"
                            }
                        },
                        "cn": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided Common Names from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "dns": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided DNS names from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "email": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided emails from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "ip": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided IPs from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "uri": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided URIs from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        }
                    },
                    "deny": {
                        "__subcommands__": {
                            "cn": "add or remove common names",
                            "dns": "add or remove DNS domains",
                            "email": "add or remove email addresses",
                            "ip": "add or remove ip addresses",
                            "uri": "add or remove URI domains"
                        },
                        "__arguements__": {
                            "help": {
                                "description": "show help",
                                "alt_form": "h",
                                "type": "option"
                            }
                        },
                        "cn": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided Common Names from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "dns": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided DNS names from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "email": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided emails from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "ip": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided IPs from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "uri": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided URIs from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        }
                    },
                    "wildcards": {
                        "__subcommands__": {
                            "allow": "allow wildcard names in X.509 certificate issuance policies",
                            "deny": "deny wildcard names in X.509 certificate issuance policies"
                        },
                        "__arguements__": {
                            "help": {
                                "description": "show help",
                                "alt_form": "h",
                                "type": "option"
                            }
                        },
                        "allow": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "deny": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        }
                    }
                },
                "ssh": {
                    "__subcommands__": {
                        "host": "manage SSH host certificate issuance policies",
                        "user": "manage SSH user certificate issuance policies"
                    },
                    "__arguements__": {
                        "help": {
                            "description": "show help",
                            "alt_form": "h",
                            "type": "option"
                        }
                    },
                    "host": {
                        "__subcommands__": {
                            "allow": "manage allowed SSH host certificate principals",
                            "deny": "manage denied dSSH host certificate principals"
                        },
                        "__arguements__": {
                            "help": {
                                "description": "show help",
                                "alt_form": "h",
                                "type": "option"
                            }
                        },
                        "allow": {
                            "__subcommands__": {
                                "dns": "add or remove DNS domains",
                                "email": "add or remove email addresses",
                                "principal": "add or remove principals"
                            },
                            "__arguements__": {
                                "help": {
                                    "description": "show help",
                                    "alt_form": "h",
                                    "type": "option"
                                }
                            },
                            "dns": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "eab-key-id": {
                                        "description": "An ACME EAB Key ID.",
                                        "param": "value",
                                        "type": "optional argument"
                                    },
                                    "eab-key-reference": {
                                        "description": "An ACME EAB Key Reference.",
                                        "param": "value",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided DNS names from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            },
                            "email": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided emails from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            },
                            "principal": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided Principals from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            }
                        },
                        "deny": {
                            "__subcommands__": {
                                "dns": "add or remove DNS domains",
                                "email": "add or remove email addresses",
                                "principal": "add or remove principals"
                            },
                            "__arguements__": {
                                "help": {
                                    "description": "show help",
                                    "alt_form": "h",
                                    "type": "option"
                                }
                            },
                            "dns": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "eab-key-id": {
                                        "description": "An ACME EAB Key ID.",
                                        "param": "value",
                                        "type": "optional argument"
                                    },
                                    "eab-key-reference": {
                                        "description": "An ACME EAB Key Reference.",
                                        "param": "value",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided DNS names from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            },
                            "email": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided emails from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            },
                            "principal": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided Principals from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            }
                        }
                    },
                    "user": {
                        "__subcommands__": {
                            "allow": "manage allowed SSH user certificate principals",
                            "deny": "manage denied SSH user certificate principals"
                        },
                        "__arguements__": {
                            "help": {
                                "description": "show help",
                                "alt_form": "h",
                                "type": "option"
                            }
                        },
                        "allow": {
                            "__subcommands__": {
                                "email": "add or remove email addresses",
                                "principal": "add or remove principals"
                            },
                            "__arguements__": {
                                "help": {
                                    "description": "show help",
                                    "alt_form": "h",
                                    "type": "option"
                                }
                            },
                            "email": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided emails from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            },
                            "principal": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided Principals from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            }
                        },
                        "deny": {
                            "__subcommands__": {
                                "email": "add or remove email addresses",
                                "principal": "add or remove principals"
                            },
                            "__arguements__": {
                                "help": {
                                    "description": "show help",
                                    "alt_form": "h",
                                    "type": "option"
                                }
                            },
                            "email": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided emails from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            },
                            "principal": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided Principals from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "provisioner": {
                "__subcommands__": {
                    "view": "view current certificate issuance policy",
                    "remove": "remove certificate issuance policy",
                    "x509": "manage X.509 certificate issuance policies",
                    "ssh": "manage SSH certificate issuance policies"
                },
                "__arguements__": {
                    "help": {
                        "description": "show help",
                        "alt_form": "h",
                        "type": "option"
                    }
                },
                "view": {
                    "__arguements__": {
                        "provisioner": {
                            "description": "The provisioner name",
                            "param": "name",
                            "type": "optional argument"
                        },
                        "eab-key-id": {
                            "description": "An ACME EAB Key ID.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "eab-key-reference": {
                            "description": "An ACME EAB Key Reference.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "admin-cert": {
                            "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                            "param": "chain",
                            "type": "optional argument"
                        },
                        "admin-key": {
                            "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "admin-subject": {
                            "description": "The admin subject to use for generating admin credentials.",
                            "param": "subject",
                            "alt_form": "admin-name",
                            "type": "optional argument"
                        },
                        "admin-provisioner": {
                            "description": "The provisioner name to use for generating admin credentials.",
                            "param": "name",
                            "alt_form": "admin-issuer",
                            "type": "optional argument"
                        },
                        "admin-password-file": {
                            "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                            "param": "file",
                            "alt_form": "password-file",
                            "type": "optional argument"
                        },
                        "ca-url": {
                            "description": "URI of the targeted Step Certificate Authority.",
                            "param": "URI",
                            "type": "optional argument"
                        },
                        "root": {
                            "description": "The path to the PEM file used as the root certificate authority.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "context": {
                            "description": "The context name to apply for the given command.",
                            "param": "name",
                            "type": "optional argument"
                        }
                    }
                },
                "remove": {
                    "__arguements__": {
                        "provisioner": {
                            "description": "The provisioner name",
                            "param": "name",
                            "type": "optional argument"
                        },
                        "eab-key-id": {
                            "description": "An ACME EAB Key ID.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "eab-key-reference": {
                            "description": "An ACME EAB Key Reference.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "admin-cert": {
                            "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                            "param": "chain",
                            "type": "optional argument"
                        },
                        "admin-key": {
                            "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "admin-subject": {
                            "description": "The admin subject to use for generating admin credentials.",
                            "param": "subject",
                            "alt_form": "admin-name",
                            "type": "optional argument"
                        },
                        "admin-provisioner": {
                            "description": "The provisioner name to use for generating admin credentials.",
                            "param": "name",
                            "alt_form": "admin-issuer",
                            "type": "optional argument"
                        },
                        "admin-password-file": {
                            "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                            "param": "file",
                            "alt_form": "password-file",
                            "type": "optional argument"
                        },
                        "ca-url": {
                            "description": "URI of the targeted Step Certificate Authority.",
                            "param": "URI",
                            "type": "optional argument"
                        },
                        "root": {
                            "description": "The path to the PEM file used as the root certificate authority.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "context": {
                            "description": "The context name to apply for the given command.",
                            "param": "name",
                            "type": "optional argument"
                        }
                    }
                },
                "x509": {
                    "__subcommands__": {
                        "allow": "manage allowed names for X.509 certificate issuance policies",
                        "deny": "manage denied names for X.509 certificate issuance policies",
                        "wildcards": "manage wildcard name settings for X.509 certificate issuance policies"
                    },
                    "__arguements__": {
                        "help": {
                            "description": "show help",
                            "alt_form": "h",
                            "type": "option"
                        }
                    },
                    "allow": {
                        "__subcommands__": {
                            "cn": "add or remove common names",
                            "dns": "add or remove DNS domains",
                            "email": "add or remove email addresses",
                            "ip": "add or remove ip addresses",
                            "uri": "add or remove URI domains"
                        },
                        "__arguements__": {
                            "help": {
                                "description": "show help",
                                "alt_form": "h",
                                "type": "option"
                            }
                        },
                        "cn": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided Common Names from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "dns": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided DNS names from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "email": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided emails from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "ip": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided IPs from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "uri": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided URIs from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        }
                    },
                    "deny": {
                        "__subcommands__": {
                            "cn": "add or remove common names",
                            "dns": "add or remove DNS domains",
                            "email": "add or remove email addresses",
                            "ip": "add or remove ip addresses",
                            "uri": "add or remove URI domains"
                        },
                        "__arguements__": {
                            "help": {
                                "description": "show help",
                                "alt_form": "h",
                                "type": "option"
                            }
                        },
                        "cn": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided Common Names from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "dns": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided DNS names from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "email": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided emails from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "ip": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided IPs from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "uri": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided URIs from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        }
                    },
                    "wildcards": {
                        "__subcommands__": {
                            "allow": "allow wildcard names in X.509 certificate issuance policies",
                            "deny": "deny wildcard names in X.509 certificate issuance policies"
                        },
                        "__arguements__": {
                            "help": {
                                "description": "show help",
                                "alt_form": "h",
                                "type": "option"
                            }
                        },
                        "allow": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "deny": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        }
                    }
                },
                "ssh": {
                    "__subcommands__": {
                        "host": "manage SSH host certificate issuance policies",
                        "user": "manage SSH user certificate issuance policies"
                    },
                    "__arguements__": {
                        "help": {
                            "description": "show help",
                            "alt_form": "h",
                            "type": "option"
                        }
                    },
                    "host": {
                        "__subcommands__": {
                            "allow": "manage allowed SSH host certificate principals",
                            "deny": "manage denied dSSH host certificate principals"
                        },
                        "__arguements__": {
                            "help": {
                                "description": "show help",
                                "alt_form": "h",
                                "type": "option"
                            }
                        },
                        "allow": {
                            "__subcommands__": {
                                "dns": "add or remove DNS domains",
                                "email": "add or remove email addresses",
                                "principal": "add or remove principals"
                            },
                            "__arguements__": {
                                "help": {
                                    "description": "show help",
                                    "alt_form": "h",
                                    "type": "option"
                                }
                            },
                            "dns": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "eab-key-id": {
                                        "description": "An ACME EAB Key ID.",
                                        "param": "value",
                                        "type": "optional argument"
                                    },
                                    "eab-key-reference": {
                                        "description": "An ACME EAB Key Reference.",
                                        "param": "value",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided DNS names from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            },
                            "email": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided emails from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            },
                            "principal": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided Principals from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            }
                        },
                        "deny": {
                            "__subcommands__": {
                                "dns": "add or remove DNS domains",
                                "email": "add or remove email addresses",
                                "principal": "add or remove principals"
                            },
                            "__arguements__": {
                                "help": {
                                    "description": "show help",
                                    "alt_form": "h",
                                    "type": "option"
                                }
                            },
                            "dns": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "eab-key-id": {
                                        "description": "An ACME EAB Key ID.",
                                        "param": "value",
                                        "type": "optional argument"
                                    },
                                    "eab-key-reference": {
                                        "description": "An ACME EAB Key Reference.",
                                        "param": "value",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided DNS names from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            },
                            "email": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided emails from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            },
                            "principal": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided Principals from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            }
                        }
                    },
                    "user": {
                        "__subcommands__": {
                            "allow": "manage allowed SSH user certificate principals",
                            "deny": "manage denied SSH user certificate principals"
                        },
                        "__arguements__": {
                            "help": {
                                "description": "show help",
                                "alt_form": "h",
                                "type": "option"
                            }
                        },
                        "allow": {
                            "__subcommands__": {
                                "email": "add or remove email addresses",
                                "principal": "add or remove principals"
                            },
                            "__arguements__": {
                                "help": {
                                    "description": "show help",
                                    "alt_form": "h",
                                    "type": "option"
                                }
                            },
                            "email": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided emails from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            },
                            "principal": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided Principals from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            }
                        },
                        "deny": {
                            "__subcommands__": {
                                "email": "add or remove email addresses",
                                "principal": "add or remove principals"
                            },
                            "__arguements__": {
                                "help": {
                                    "description": "show help",
                                    "alt_form": "h",
                                    "type": "option"
                                }
                            },
                            "email": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided emails from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            },
                            "principal": {
                                "__arguements__": {
                                    "provisioner": {
                                        "description": "The provisioner name",
                                        "param": "name",
                                        "type": "optional argument"
                                    },
                                    "remove": {
                                        "description": "removes the provided Principals from the policy instead of adding them",
                                        "type": "option"
                                    },
                                    "admin-cert": {
                                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                        "param": "chain",
                                        "type": "optional argument"
                                    },
                                    "admin-key": {
                                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "admin-subject": {
                                        "description": "The admin subject to use for generating admin credentials.",
                                        "param": "subject",
                                        "alt_form": "admin-name",
                                        "type": "optional argument"
                                    },
                                    "admin-provisioner": {
                                        "description": "The provisioner name to use for generating admin credentials.",
                                        "param": "name",
                                        "alt_form": "admin-issuer",
                                        "type": "optional argument"
                                    },
                                    "admin-password-file": {
                                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                        "param": "file",
                                        "alt_form": "password-file",
                                        "type": "optional argument"
                                    },
                                    "ca-url": {
                                        "description": "URI of the targeted Step Certificate Authority.",
                                        "param": "URI",
                                        "type": "optional argument"
                                    },
                                    "root": {
                                        "description": "The path to the PEM file used as the root certificate authority.",
                                        "param": "file",
                                        "type": "optional argument"
                                    },
                                    "context": {
                                        "description": "The context name to apply for the given command.",
                                        "param": "name",
                                        "type": "optional argument"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "acme": {
                "__subcommands__": {
                    "view": "view current certificate issuance policy",
                    "remove": "remove certificate issuance policy",
                    "x509": "manage X.509 certificate issuance policies"
                },
                "__arguements__": {
                    "help": {
                        "description": "show help",
                        "alt_form": "h",
                        "type": "option"
                    }
                },
                "view": {
                    "__arguements__": {
                        "provisioner": {
                            "description": "The provisioner name",
                            "param": "name",
                            "type": "optional argument"
                        },
                        "eab-key-id": {
                            "description": "An ACME EAB Key ID.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "eab-key-reference": {
                            "description": "An ACME EAB Key Reference.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "admin-cert": {
                            "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                            "param": "chain",
                            "type": "optional argument"
                        },
                        "admin-key": {
                            "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "admin-subject": {
                            "description": "The admin subject to use for generating admin credentials.",
                            "param": "subject",
                            "alt_form": "admin-name",
                            "type": "optional argument"
                        },
                        "admin-provisioner": {
                            "description": "The provisioner name to use for generating admin credentials.",
                            "param": "name",
                            "alt_form": "admin-issuer",
                            "type": "optional argument"
                        },
                        "admin-password-file": {
                            "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                            "param": "file",
                            "alt_form": "password-file",
                            "type": "optional argument"
                        },
                        "ca-url": {
                            "description": "URI of the targeted Step Certificate Authority.",
                            "param": "URI",
                            "type": "optional argument"
                        },
                        "root": {
                            "description": "The path to the PEM file used as the root certificate authority.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "context": {
                            "description": "The context name to apply for the given command.",
                            "param": "name",
                            "type": "optional argument"
                        }
                    }
                },
                "remove": {
                    "__arguements__": {
                        "provisioner": {
                            "description": "The provisioner name",
                            "param": "name",
                            "type": "optional argument"
                        },
                        "eab-key-id": {
                            "description": "An ACME EAB Key ID.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "eab-key-reference": {
                            "description": "An ACME EAB Key Reference.",
                            "param": "value",
                            "type": "optional argument"
                        },
                        "admin-cert": {
                            "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                            "param": "chain",
                            "type": "optional argument"
                        },
                        "admin-key": {
                            "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "admin-subject": {
                            "description": "The admin subject to use for generating admin credentials.",
                            "param": "subject",
                            "alt_form": "admin-name",
                            "type": "optional argument"
                        },
                        "admin-provisioner": {
                            "description": "The provisioner name to use for generating admin credentials.",
                            "param": "name",
                            "alt_form": "admin-issuer",
                            "type": "optional argument"
                        },
                        "admin-password-file": {
                            "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                            "param": "file",
                            "alt_form": "password-file",
                            "type": "optional argument"
                        },
                        "ca-url": {
                            "description": "URI of the targeted Step Certificate Authority.",
                            "param": "URI",
                            "type": "optional argument"
                        },
                        "root": {
                            "description": "The path to the PEM file used as the root certificate authority.",
                            "param": "file",
                            "type": "optional argument"
                        },
                        "context": {
                            "description": "The context name to apply for the given command.",
                            "param": "name",
                            "type": "optional argument"
                        }
                    }
                },
                "x509": {
                    "__subcommands__": {
                        "allow": "manage allowed names for X.509 certificate issuance policies",
                        "deny": "manage denied names for X.509 certificate issuance policies",
                        "wildcards": "manage wildcard name settings for X.509 certificate issuance policies"
                    },
                    "__arguements__": {
                        "help": {
                            "description": "show help",
                            "alt_form": "h",
                            "type": "option"
                        }
                    },
                    "allow": {
                        "__subcommands__": {
                            "cn": "add or remove common names",
                            "dns": "add or remove DNS domains",
                            "email": "add or remove email addresses",
                            "ip": "add or remove ip addresses",
                            "uri": "add or remove URI domains"
                        },
                        "__arguements__": {
                            "help": {
                                "description": "show help",
                                "alt_form": "h",
                                "type": "option"
                            }
                        },
                        "cn": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided Common Names from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "dns": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided DNS names from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "email": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided emails from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "ip": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided IPs from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "uri": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided URIs from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        }
                    },
                    "deny": {
                        "__subcommands__": {
                            "cn": "add or remove common names",
                            "dns": "add or remove DNS domains",
                            "email": "add or remove email addresses",
                            "ip": "add or remove ip addresses",
                            "uri": "add or remove URI domains"
                        },
                        "__arguements__": {
                            "help": {
                                "description": "show help",
                                "alt_form": "h",
                                "type": "option"
                            }
                        },
                        "cn": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided Common Names from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "dns": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided DNS names from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "email": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided emails from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "ip": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided IPs from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "uri": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "remove": {
                                    "description": "removes the provided URIs from the policy instead of adding them",
                                    "type": "option"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        }
                    },
                    "wildcards": {
                        "__subcommands__": {
                            "allow": "allow wildcard names in X.509 certificate issuance policies",
                            "deny": "deny wildcard names in X.509 certificate issuance policies"
                        },
                        "__arguements__": {
                            "help": {
                                "description": "show help",
                                "alt_form": "h",
                                "type": "option"
                            }
                        },
                        "allow": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        },
                        "deny": {
                            "__arguements__": {
                                "provisioner": {
                                    "description": "The provisioner name",
                                    "param": "name",
                                    "type": "optional argument"
                                },
                                "eab-key-id": {
                                    "description": "An ACME EAB Key ID.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "eab-key-reference": {
                                    "description": "An ACME EAB Key Reference.",
                                    "param": "value",
                                    "type": "optional argument"
                                },
                                "admin-cert": {
                                    "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                    "param": "chain",
                                    "type": "optional argument"
                                },
                                "admin-key": {
                                    "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "admin-subject": {
                                    "description": "The admin subject to use for generating admin credentials.",
                                    "param": "subject",
                                    "alt_form": "admin-name",
                                    "type": "optional argument"
                                },
                                "admin-provisioner": {
                                    "description": "The provisioner name to use for generating admin credentials.",
                                    "param": "name",
                                    "alt_form": "admin-issuer",
                                    "type": "optional argument"
                                },
                                "admin-password-file": {
                                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                    "param": "file",
                                    "alt_form": "password-file",
                                    "type": "optional argument"
                                },
                                "ca-url": {
                                    "description": "URI of the targeted Step Certificate Authority.",
                                    "param": "URI",
                                    "type": "optional argument"
                                },
                                "root": {
                                    "description": "The path to the PEM file used as the root certificate authority.",
                                    "param": "file",
                                    "type": "optional argument"
                                },
                                "context": {
                                    "description": "The context name to apply for the given command.",
                                    "param": "name",
                                    "type": "optional argument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "admin": {
            "__subcommands__": {
                "list": "list all admins in the CA configuration",
                "add": "add an admin to the CA configuration",
                "remove": "remove an admin from the CA configuration",
                "update": "update an admin"
            },
            "__arguements__": {
                "help": {
                    "description": "show help",
                    "alt_form": "h",
                    "type": "option"
                }
            },
            "list": {
                "__arguements__": {
                    "super": {
                        "description": "Only return super-admins.",
                        "type": "option"
                    },
                    "provisioner": {
                        "description": "The provisioner name by which to filter admins.",
                        "param": "name",
                        "type": "optional argument"
                    },
                    "admin-cert": {
                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                        "param": "chain",
                        "type": "optional argument"
                    },
                    "admin-key": {
                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "admin-subject": {
                        "description": "The admin subject to use for generating admin credentials.",
                        "param": "subject",
                        "alt_form": "admin-name",
                        "type": "optional argument"
                    },
                    "admin-provisioner": {
                        "description": "The provisioner name to use for generating admin credentials.",
                        "param": "name",
                        "alt_form": "admin-issuer",
                        "type": "optional argument"
                    },
                    "admin-password-file": {
                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                        "param": "file",
                        "alt_form": "password-file",
                        "type": "optional argument"
                    },
                    "ca-url": {
                        "description": "URI of the targeted Step Certificate Authority.",
                        "param": "URI",
                        "type": "optional argument"
                    },
                    "root": {
                        "description": "The path to the PEM file used as the root certificate authority.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "context": {
                        "description": "The context name to apply for the given command.",
                        "param": "name",
                        "type": "optional argument"
                    }
                }
            },
            "add": {
                "__arguements__": {
                    "subject": {
                        "description": "The subject name that must appear in the identifying credential of the admin.",
                        "type": "positional argument"
                    },
                    "provisioner": {
                        "description": "The name of the provisioner",
                        "type": "positional argument"
                    },
                    "super": {
                        "description": "Give administrator SuperAdmin privileges.",
                        "type": "option"
                    },
                    "admin-cert": {
                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                        "param": "chain",
                        "type": "optional argument"
                    },
                    "admin-key": {
                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "admin-subject": {
                        "description": "The admin subject to use for generating admin credentials.",
                        "param": "subject",
                        "alt_form": "admin-name",
                        "type": "optional argument"
                    },
                    "admin-provisioner": {
                        "description": "The provisioner name to use for generating admin credentials.",
                        "param": "name",
                        "alt_form": "admin-issuer",
                        "type": "optional argument"
                    },
                    "admin-password-file": {
                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                        "param": "file",
                        "alt_form": "password-file",
                        "type": "optional argument"
                    },
                    "ca-url": {
                        "description": "URI of the targeted Step Certificate Authority.",
                        "param": "URI",
                        "type": "optional argument"
                    },
                    "root": {
                        "description": "The path to the PEM file used as the root certificate authority.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "context": {
                        "description": "The context name to apply for the given command.",
                        "param": "name",
                        "type": "optional argument"
                    }
                }
            },
            "remove": {
                "__arguements__": {
                    "name": {
                        "description": "The name of the admin to be removed.",
                        "type": "positional argument"
                    },
                    "provisioner": {
                        "description": "The provisioner name by which to filter admins.",
                        "param": "name",
                        "type": "optional argument"
                    },
                    "admin-cert": {
                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                        "param": "chain",
                        "type": "optional argument"
                    },
                    "admin-key": {
                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "admin-subject": {
                        "description": "The admin subject to use for generating admin credentials.",
                        "param": "subject",
                        "alt_form": "admin-name",
                        "type": "optional argument"
                    },
                    "admin-provisioner": {
                        "description": "The provisioner name to use for generating admin credentials.",
                        "param": "name",
                        "alt_form": "admin-issuer",
                        "type": "optional argument"
                    },
                    "admin-password-file": {
                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                        "param": "file",
                        "alt_form": "password-file",
                        "type": "optional argument"
                    },
                    "ca-url": {
                        "description": "URI of the targeted Step Certificate Authority.",
                        "param": "URI",
                        "type": "optional argument"
                    },
                    "root": {
                        "description": "The path to the PEM file used as the root certificate authority.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "context": {
                        "description": "The context name to apply for the given command.",
                        "param": "name",
                        "type": "optional argument"
                    }
                }
            },
            "update": {
                "__arguements__": {
                    "id": {
                        "description": "The name of the admin to update.",
                        "type": "positional argument"
                    },
                    "super": {
                        "description": "Update the admin with super-admin privileges.",
                        "type": "option"
                    },
                    "provisioner": {
                        "description": "The provisioner name by which to filter admins.",
                        "param": "name",
                        "type": "optional argument"
                    },
                    "admin-cert": {
                        "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                        "param": "chain",
                        "type": "optional argument"
                    },
                    "admin-key": {
                        "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "admin-subject": {
                        "description": "The admin subject to use for generating admin credentials.",
                        "param": "subject",
                        "alt_form": "admin-name",
                        "type": "optional argument"
                    },
                    "admin-provisioner": {
                        "description": "The provisioner name to use for generating admin credentials.",
                        "param": "name",
                        "alt_form": "admin-issuer",
                        "type": "optional argument"
                    },
                    "admin-password-file": {
                        "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                        "param": "file",
                        "alt_form": "password-file",
                        "type": "optional argument"
                    },
                    "ca-url": {
                        "description": "URI of the targeted Step Certificate Authority.",
                        "param": "URI",
                        "type": "optional argument"
                    },
                    "root": {
                        "description": "The path to the PEM file used as the root certificate authority.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "context": {
                        "description": "The context name to apply for the given command.",
                        "param": "name",
                        "type": "optional argument"
                    }
                }
            }
        }
    },
    "beta": {
        "__subcommands__": {
            "ca": "commands that are made available for testing new features and APIs"
        },
        "__arguements__": {
            "help": {
                "description": "show help",
                "alt_form": "h",
                "type": "option"
            }
        },
        "ca": {
            "__subcommands__": {
                "acme": "manage ACME settings"
            },
            "__arguements__": {
                "help": {
                    "description": "show help",
                    "alt_form": "h",
                    "type": "option"
                }
            },
            "acme": {
                "__subcommands__": {
                    "eab": "create and manage ACME External Account Binding Keys"
                },
                "__arguements__": {
                    "help": {
                        "description": "show help",
                        "alt_form": "h",
                        "type": "option"
                    }
                },
                "eab": {
                    "__subcommands__": {
                        "list": "list all ACME External Account Binding Keys",
                        "add": "add ACME External Account Binding Key",
                        "remove": "remove an ACME EAB Key from the CA"
                    },
                    "__arguements__": {
                        "help": {
                            "description": "show help",
                            "alt_form": "h",
                            "type": "option"
                        }
                    },
                    "list": {
                        "__arguements__": {
                            "provisioner": {
                                "description": "Name of the provisioner to list ACME EAB keys for",
                                "type": "positional argument"
                            },
                            "eab-key-reference": {
                                "description": "(Optional) reference (from external system) for the key to be listed",
                                "type": "positional argument"
                            },
                            "limit": {
                                "description": "The number of entities to return per (paging) API request.",
                                "param": "value",
                                "type": "optional argument"
                            },
                            "no-pager": {
                                "description": "Disables usage of $PAGER for paging purposes",
                                "type": "option"
                            },
                            "admin-cert": {
                                "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                "param": "chain",
                                "type": "optional argument"
                            },
                            "admin-key": {
                                "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                "param": "file",
                                "type": "optional argument"
                            },
                            "admin-subject": {
                                "description": "The admin subject to use for generating admin credentials.",
                                "param": "subject",
                                "alt_form": "admin-name",
                                "type": "optional argument"
                            },
                            "admin-provisioner": {
                                "description": "The provisioner name to use for generating admin credentials.",
                                "param": "name",
                                "alt_form": "admin-issuer",
                                "type": "optional argument"
                            },
                            "admin-password-file": {
                                "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                "param": "file",
                                "alt_form": "password-file",
                                "type": "optional argument"
                            },
                            "ca-url": {
                                "description": "URI of the targeted Step Certificate Authority.",
                                "param": "URI",
                                "type": "optional argument"
                            },
                            "root": {
                                "description": "The path to the PEM file used as the root certificate authority.",
                                "param": "file",
                                "type": "optional argument"
                            },
                            "context": {
                                "description": "The context name to apply for the given command.",
                                "param": "name",
                                "type": "optional argument"
                            }
                        }
                    },
                    "add": {
                        "__arguements__": {
                            "provisioner": {
                                "description": "Name of the provisioner to which the ACME EAB key will be added",
                                "type": "positional argument"
                            },
                            "eab-key-reference": {
                                "description": "(Optional) reference (from external system) for the key that will be added",
                                "type": "positional argument"
                            },
                            "admin-cert": {
                                "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                "param": "chain",
                                "type": "optional argument"
                            },
                            "admin-key": {
                                "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                "param": "file",
                                "type": "optional argument"
                            },
                            "admin-subject": {
                                "description": "The admin subject to use for generating admin credentials.",
                                "param": "subject",
                                "alt_form": "admin-name",
                                "type": "optional argument"
                            },
                            "admin-provisioner": {
                                "description": "The provisioner name to use for generating admin credentials.",
                                "param": "name",
                                "alt_form": "admin-issuer",
                                "type": "optional argument"
                            },
                            "admin-password-file": {
                                "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                "param": "file",
                                "alt_form": "password-file",
                                "type": "optional argument"
                            },
                            "ca-url": {
                                "description": "URI of the targeted Step Certificate Authority.",
                                "param": "URI",
                                "type": "optional argument"
                            },
                            "root": {
                                "description": "The path to the PEM file used as the root certificate authority.",
                                "param": "file",
                                "type": "optional argument"
                            },
                            "context": {
                                "description": "The context name to apply for the given command.",
                                "param": "name",
                                "type": "optional argument"
                            }
                        }
                    },
                    "remove": {
                        "__arguements__": {
                            "provisioner": {
                                "description": "Name of the provisioner to remove an ACME EAB key for",
                                "type": "positional argument"
                            },
                            "eab-key-id": {
                                "description": "The ACME EAB Key ID to remove",
                                "type": "positional argument"
                            },
                            "admin-cert": {
                                "description": "Admin certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                                "param": "chain",
                                "type": "optional argument"
                            },
                            "admin-key": {
                                "description": "Private key file, used to sign a JWT, corresponding to the admin certificate that will be stored in the 'x5c' header.",
                                "param": "file",
                                "type": "optional argument"
                            },
                            "admin-subject": {
                                "description": "The admin subject to use for generating admin credentials.",
                                "param": "subject",
                                "alt_form": "admin-name",
                                "type": "optional argument"
                            },
                            "admin-provisioner": {
                                "description": "The provisioner name to use for generating admin credentials.",
                                "param": "name",
                                "alt_form": "admin-issuer",
                                "type": "optional argument"
                            },
                            "admin-password-file": {
                                "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                                "param": "file",
                                "alt_form": "password-file",
                                "type": "optional argument"
                            },
                            "ca-url": {
                                "description": "URI of the targeted Step Certificate Authority.",
                                "param": "URI",
                                "type": "optional argument"
                            },
                            "root": {
                                "description": "The path to the PEM file used as the root certificate authority.",
                                "param": "file",
                                "type": "optional argument"
                            },
                            "context": {
                                "description": "The context name to apply for the given command.",
                                "param": "name",
                                "type": "optional argument"
                            }
                        }
                    }
                }
            }
        }
    },
    "certificate": {
        "__subcommands__": {
            "bundle": "bundle a certificate with intermediate certificate(s) needed for certificate path validation",
            "create": "create a certificate or certificate signing request",
            "format": "reformat certificate",
            "inspect": "print certificate or CSR details in human readable format",
            "fingerprint": "print the fingerprint of a certificate",
            "lint": "lint certificate details",
            "needs-renewal": "Check if a certificate needs to be renewed",
            "sign": "sign a certificate signing request (CSR)",
            "verify": "verify a certificate",
            "key": "print public key embedded in a certificate",
            "install": "install a root certificate in the system truststore",
            "uninstall": "uninstall a root certificate from the system truststore",
            "p12": "package a certificate and keys into a .p12 file"
        },
        "__arguements__": {
            "help": {
                "description": "show help",
                "alt_form": "h",
                "type": "option"
            }
        },
        "bundle": {
            "__arguements__": {
                "crt-file": {
                    "description": "The path to a leaf certificate to bundle with issuing certificate(s).",
                    "type": "positional argument"
                },
                "ca": {
                    "description": "The path to the Certificate Authority issuing certificate.",
                    "type": "positional argument"
                },
                "bundle-file": {
                    "description": "The path to write the bundle.",
                    "type": "positional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                }
            }
        },
        "create": {
            "__arguements__": {
                "subject": {
                    "description": "The subject of the certificate. Typically this is a hostname for services or an email address for people.",
                    "type": "positional argument"
                },
                "crt-file": {
                    "description": "File to write CRT or CSR to (PEM format)",
                    "type": "positional argument"
                },
                "key-file": {
                    "description": "File to write private key to (PEM format). This argument is optional if --key is passed.",
                    "type": "positional argument"
                },
                "kms": {
                    "description": "The uri to configure a Cloud KMS or an HSM.",
                    "param": "uri",
                    "type": "optional argument"
                },
                "csr": {
                    "description": "Generate a certificate signing request (CSR) instead of a certificate.",
                    "type": "option"
                },
                "profile": {
                    "description": "The certificate profile sets various certificate details such as certificate use and expiration. The default profile is 'leaf' which is suitable for a client or server using TLS.  profile is a case-sensitive string and must be one of:  leaf Generate a leaf x.509 certificate suitable for use with TLS.  intermediate-ca Generate a certificate that can be used to sign additional leaf certificates.  root-ca Generate a new self-signed root certificate suitable for use as a root CA.  self-signed Generate a new self-signed leaf certificate suitable for use with TLS. This profile requires the --subtle flag because the use of self-signed leaf certificates is discouraged unless absolutely necessary.",
                    "param": "profile",
                    "type": "optional argument"
                },
                "template": {
                    "description": "The certificate template file, a JSON representation of the certificate to create.",
                    "param": "file",
                    "type": "optional argument"
                },
                "set": {
                    "description": "The key=value pair with template data variables. Use the --set flag multiple times to add multiple variables.",
                    "param": "key",
                    "type": "optional argument"
                },
                "set-file": {
                    "description": "The JSON file with the template data variables.",
                    "param": "file",
                    "type": "optional argument"
                },
                "password-file": {
                    "description": "The path to the file containing the password to encrypt the new private key or decrypt the user submitted private key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "ca": {
                    "description": "The certificate authority used to issue the new certificate (PEM file).",
                    "param": "value",
                    "type": "optional argument"
                },
                "ca-key": {
                    "description": "The certificate authority private key used to sign the new certificate (PEM file).",
                    "param": "value",
                    "type": "optional argument"
                },
                "ca-password-file": {
                    "description": "The path to the file containing the password to decrypt the CA private key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "key": {
                    "description": "The file of the private key to use instead of creating a new one (PEM file).",
                    "param": "file",
                    "type": "optional argument"
                },
                "no-password": {
                    "description": "Do not ask for a password to encrypt the private key. Sensitive key material will be written to disk unencrypted. This is not recommended. Requires --insecure flag.",
                    "type": "option"
                },
                "not-before": {
                    "description": "The time|duration set in the NotBefore property of the certificate. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "time|duration",
                    "type": "optional argument"
                },
                "not-after": {
                    "description": "The time|duration set in the NotAfter property of the certificate. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "time|duration",
                    "type": "optional argument"
                },
                "san": {
                    "description": "Add DNS or IP Address Subjective Alternative Names (SANs). Use the '--san' flag multiple times to configure multiple SANs.",
                    "param": "value",
                    "type": "optional argument"
                },
                "bundle": {
                    "description": "Bundle the new leaf certificate with the signing certificate. This flag requires the --ca flag.",
                    "type": "option"
                },
                "kty": {
                    "description": "The kty to build the certificate upon. If unset, default is EC.  kty is a case-sensitive string and must be one of:  EC Create an elliptic curve keypair  OKP Create an octet key pair (for \"Ed25519\" curve)  RSA Create an RSA keypair",
                    "param": "kty",
                    "type": "optional argument"
                },
                "size": {
                    "description": "The size (in bits) of the key for RSA and oct key types. RSA keys require a minimum key size of 2048 bits. If unset, default is 2048 bits for RSA keys and 128 bits for oct keys.",
                    "param": "size",
                    "type": "optional argument"
                },
                "crv": {
                    "description": "The elliptic curve to use for EC and OKP key types. Corresponds to the \"crv\" JWK parameter. Valid curves are defined in JWA [RFC7518]. If unset, default is P-256 for EC keys and Ed25519 for OKP keys.  curve is a case-sensitive string and must be one of:  P-256 NIST P-256 Curve  P-384 NIST P-384 Curve  P-521 NIST P-521 Curve  Ed25519 Ed25519 Curve",
                    "param": "curve",
                    "alt_form": "curve",
                    "type": "optional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "subtle": {
                    "description": "EXIT CODES This command returns 0 on success and >0 if any error occurs.",
                    "type": "option"
                }
            }
        },
        "format": {
            "__arguements__": {
                "crt-file": {
                    "description": "Path to a certificate or CSR file.",
                    "type": "positional argument"
                },
                "out": {
                    "description": "Path to write the reformatted result.",
                    "param": "value",
                    "type": "optional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                }
            }
        },
        "inspect": {
            "__arguements__": {
                "crt-file": {
                    "description": "Path to a certificate or certificate signing request (CSR) to inspect. A hyphen (\"-\") indicates STDIN as crt-file.",
                    "type": "positional argument"
                },
                "format": {
                    "description": "The output format for printing the introspection details.  format is a string and must be one of:  text Print output in unstructured text suitable for a human to read.  json Print output in JSON format.  pem Print output in PEM format.",
                    "param": "format",
                    "type": "optional argument"
                },
                "roots": {
                    "description": "Root certificate(s) that will be used to verify the authenticity of the remote server.  roots is a case-sensitive string and may be one of:  file Relative or full path to a file. All certificates in the file will be used for path validation.  list of files Comma-separated list of relative or full file paths. Every PEM encoded certificate from each file will be used for path validation.  directory Relative or full path to a directory. Every PEM encoded certificate from each file in the directory will be used for path validation.",
                    "param": "roots",
                    "type": "optional argument"
                },
                "servername": {
                    "description": "TLS Server Name Indication that should be sent to request a specific certificate from the server.",
                    "param": "value",
                    "type": "optional argument"
                },
                "bundle": {
                    "description": "Print all certificates in the order in which they appear in the bundle. If the output format is 'json' then output a list of certificates, even if the bundle only contains one certificate. This flag will result in an error if the input bundle includes any PEM that does not have type CERTIFICATE.",
                    "type": "option"
                },
                "short": {
                    "description": "Print the certificate or CSR details in shorter and more friendly format.",
                    "type": "option"
                },
                "insecure": {
                    "description": "Use an insecure client to retrieve a remote peer certificate. Useful for debugging invalid certificates remotely.",
                    "type": "option"
                }
            }
        },
        "fingerprint": {
            "__arguements__": {
                "crt-file": {
                    "description": "A certificate PEM file, usually the root certificate.",
                    "type": "positional argument"
                },
                "roots": {
                    "description": "Root certificate(s) that will be used to verify the authenticity of the remote server.  roots is a case-sensitive string and may be one of:  file Relative or full path to a file. All certificates in the file will be used for path validation.  list of files Comma-separated list of relative or full file paths. Every PEM encoded certificate from each file will be used for path validation.  directory Relative or full path to a directory. Every PEM encoded certificate from each file in the directory will be used for path validation.",
                    "param": "roots",
                    "type": "optional argument"
                },
                "bundle": {
                    "description": "Print all fingerprints in the order in which they appear in the bundle.",
                    "type": "option"
                },
                "insecure": {
                    "description": "Use an insecure client to retrieve a remote peer certificate. Useful for debugging invalid certificates remotely.",
                    "type": "option"
                },
                "servername": {
                    "description": "TLS Server Name Indication that should be sent to request a specific certificate from the server.",
                    "param": "value",
                    "type": "optional argument"
                },
                "format": {
                    "description": "The format of the fingerprint, it must be \"hex\", \"base64\", \"base64-url\", \"base64-raw\", \"base64-url-raw\" or \"emoji\".",
                    "param": "format",
                    "type": "optional argument"
                },
                "sha1": {
                    "description": "Use the SHA-1 hash algorithm to hash the certificate. Requires --insecure flag.",
                    "type": "option"
                }
            }
        },
        "lint": {
            "__arguements__": {
                "crt-file": {
                    "description": "Path to a certificate or certificate signing request (CSR) to lint.",
                    "type": "positional argument"
                },
                "roots": {
                    "description": "Root certificate(s) that will be used to verify the authenticity of the remote server.  roots is a case-sensitive string and may be one of:  file Relative or full path to a file. All certificates in the file will be used for path validation.  list of files Comma-separated list of relative or full file paths. Every PEM encoded certificate from each file will be used for path validation.  directory Relative or full path to a directory. Every PEM encoded certificate from each file in the directory will be used for path validation.",
                    "param": "roots",
                    "type": "optional argument"
                },
                "insecure": {
                    "description": "Use an insecure client to retrieve a remote peer certificate. Useful for debugging invalid certificates remotely.",
                    "type": "option"
                },
                "servername": {
                    "description": "TLS Server Name Indication that should be sent to request a specific certificate from the server.",
                    "param": "value",
                    "type": "optional argument"
                }
            }
        },
        "needs-renewal": {
            "__arguements__": {
                "cert-file or hostname": {
                    "description": "The path to a certificate OR a hostname with protocol prefix.",
                    "type": "positional argument"
                },
                "expires-in": {
                    "description": "Check if the certificate expires within the given time window using percent|duration. If using percent, the input must be followed by a \"%\" character. If using duration, the input must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "percent|duration",
                    "type": "optional argument"
                },
                "roots": {
                    "description": "Root certificate(s) that will be used to verify the authenticity of the remote server.  roots is a case-sensitive string and may be one of:  file Relative or full path to a file. All certificates in the file will be used for path validation.  list of files Comma-separated list of relative or full file paths. Every PEM encoded certificate from each file will be used for path validation.  directory Relative or full path to a directory. Every PEM encoded certificate from each file in the directory will be used for path validation.",
                    "param": "roots",
                    "type": "optional argument"
                },
                "bundle": {
                    "description": "Check all certificates in the order in which they appear in the bundle.",
                    "type": "option"
                },
                "verbose": {
                    "description": "Print human readable affirmation if certificate requires renewal.",
                    "alt_form": "v",
                    "type": "option"
                },
                "servername": {
                    "description": "TLS Server Name Indication that should be sent to request a specific certificate from the server.",
                    "param": "value",
                    "type": "optional argument"
                }
            }
        },
        "sign": {
            "__arguements__": {
                "csr-file": {
                    "description": "The path to a certificate signing request (CSR) to be signed.",
                    "type": "positional argument"
                },
                "crt-file": {
                    "description": "The path to an issuing certificate.",
                    "type": "positional argument"
                },
                "key-file": {
                    "description": "The path to a private key for signing the CSR.",
                    "type": "positional argument"
                },
                "kms": {
                    "description": "The uri to configure a Cloud KMS or an HSM.",
                    "param": "uri",
                    "type": "optional argument"
                },
                "profile": {
                    "description": "The certificate profile sets various certificate details such as certificate use and expiration. The default profile is 'leaf' which is suitable for a client or server using TLS.  profile is a case-sensitive string and must be one of:  leaf Signs a leaf x.509 certificate suitable for use with TLS.  intermediate-ca Signs a certificate that can be used to sign additional leaf certificates.  csr Signs a x.509 certificate without modifying the CSR.",
                    "param": "profile",
                    "type": "optional argument"
                },
                "template": {
                    "description": "The certificate template file, a JSON representation of the certificate to create.",
                    "param": "file",
                    "type": "optional argument"
                },
                "set": {
                    "description": "The key=value pair with template data variables. Use the --set flag multiple times to add multiple variables.",
                    "param": "key",
                    "type": "optional argument"
                },
                "set-file": {
                    "description": "The JSON file with the template data variables.",
                    "param": "file",
                    "type": "optional argument"
                },
                "password-file": {
                    "description": "The path to the file containing the password to encrypt or decrypt the private key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "not-before": {
                    "description": "The time|duration set in the NotBefore property of the certificate. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "time|duration",
                    "type": "optional argument"
                },
                "not-after": {
                    "description": "The time|duration set in the NotAfter property of the certificate. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "time|duration",
                    "type": "optional argument"
                },
                "path-len": {
                    "description": "The maximum path length to set in the pathLenConstraint of an intermediate-ca. Defaults to 0. If it's set to -1 no path length limit is imposed.",
                    "param": "maximum",
                    "type": "optional argument"
                },
                "bundle": {
                    "description": "Bundle the new leaf certificate with the signing certificate.",
                    "type": "option"
                }
            }
        },
        "verify": {
            "__arguements__": {
                "crt-file": {
                    "description": "The path to a certificate to validate.",
                    "type": "positional argument"
                },
                "host": {
                    "description": "Check whether the certificate is for the specified host.",
                    "param": "value",
                    "type": "optional argument"
                },
                "roots": {
                    "description": "Root certificate(s) that will be used to verify the authenticity of the remote server.  roots is a case-sensitive string and may be one of:  file Relative or full path to a file. All certificates in the file will be used for path validation.  list of files Comma-separated list of relative or full file paths. Every PEM encoded certificate from each file will be used for path validation.  directory Relative or full path to a directory. Every PEM encoded certificate from each file in the directory will be used for path validation.",
                    "param": "roots",
                    "type": "optional argument"
                },
                "servername": {
                    "description": "TLS Server Name Indication that should be sent to request a specific certificate from the server.",
                    "param": "value",
                    "type": "optional argument"
                }
            }
        },
        "key": {
            "__arguements__": {
                "crt-file": {
                    "description": "Path to a certificate or certificate signing request (CSR).",
                    "type": "positional argument"
                },
                "out": {
                    "description": "The destination file of the public key.",
                    "param": "file",
                    "alt_form": "output-file",
                    "type": "optional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                }
            }
        },
        "install": {
            "__arguements__": {
                "crt-file": {
                    "description": "Certificate to install in the system truststore",
                    "type": "positional argument"
                },
                "prefix": {
                    "description": "The prefix used to name the CA in the truststore. Defaults to the certificate common name.",
                    "param": "name",
                    "type": "optional argument"
                },
                "java": {
                    "description": "install on the Java key store",
                    "type": "option"
                },
                "firefox": {
                    "description": "install on the Firefox NSS security database",
                    "type": "option"
                },
                "no-system": {
                    "description": "disables the install on the system truststore",
                    "type": "option"
                },
                "all": {
                    "description": "install on the system, Firefox and Java truststores",
                    "type": "option"
                }
            }
        },
        "uninstall": {
            "__arguements__": {
                "crt-file": {
                    "description": "Certificate to uninstall from the system truststore",
                    "type": "positional argument"
                },
                "prefix": {
                    "description": "The prefix used to name the CA in the truststore. Defaults to the certificate common name.",
                    "param": "name",
                    "type": "optional argument"
                },
                "java": {
                    "description": "uninstall from the Java key store",
                    "type": "option"
                },
                "firefox": {
                    "description": "uninstall from the Firefox NSS security database",
                    "type": "option"
                },
                "no-system": {
                    "description": "disables the uninstall from the system truststore",
                    "type": "option"
                },
                "all": {
                    "description": "uninstall from the system, Firefox and Java truststores",
                    "type": "option"
                }
            }
        },
        "p12": {
            "__arguements__": {
                "ca": {
                    "description": "The path to the file containing a CA or intermediate certificate to add to the .p12 file. Use the '--ca' flag multiple times to add multiple CAs or intermediates.",
                    "param": "file",
                    "type": "optional argument"
                },
                "password-file": {
                    "description": "The path to the file containing the password to encrypt the .p12 file.",
                    "param": "file",
                    "type": "optional argument"
                },
                "no-password": {
                    "description": "Do not ask for a password to encrypt a private key. Sensitive key material will be written to disk unencrypted. This is not recommended. Requires --insecure flag.",
                    "type": "option"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "insecure": {
                    "description": "",
                    "type": "option"
                }
            }
        }
    },
    "completion": {
        "__arguements__": {
            "shell": {
                "description": "The shell program. Supports bash, zsh, and fish.",
                "type": "positional argument"
            }
        }
    },
    "context": {
        "__subcommands__": {
            "current": "current returns the name of the current context",
            "list": "list available certificate authority contexts",
            "remove": "remove a context and all associated configuration",
            "select": "select the default certificate authority context"
        },
        "__arguements__": {
            "help": {
                "description": "show help",
                "alt_form": "h",
                "type": "option"
            }
        },
        "current": {
            "__arguements__": {
                "json": {
                    "description": "Return stringified JSON containing the main attributes of a context.",
                    "type": "option"
                }
            }
        },
        "list": {},
        "remove": {
            "__arguements__": {
                "name": {
                    "description": "The name of the context to remove .",
                    "type": "positional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                }
            }
        },
        "select": {}
    },
    "crl": {
        "__subcommands__": {
            "inspect": "print certificate revocation list (CRL) details in human-readable format"
        },
        "__arguements__": {
            "help": {
                "description": "show help",
                "alt_form": "h",
                "type": "option"
            }
        },
        "inspect": {
            "__arguements__": {
                "file|url": {
                    "description": "The file or URL where the CRL is. If --from is passed it will inspect the certificate and extract the CRL distribution point from.",
                    "type": "positional argument"
                },
                "format": {
                    "description": "The output format for printing the introspection details.  format is a string and must be one of:  text Print output in unstructured text suitable for a human to read. This is the default format.  json Print output in JSON format.  pem Print output in PEM format.",
                    "param": "format",
                    "type": "optional argument"
                },
                "ca": {
                    "description": "The certificate file used to validate the CRL.",
                    "param": "file",
                    "type": "optional argument"
                },
                "from": {
                    "description": "Extract CRL and CA from the URL passed as argument.",
                    "type": "option"
                },
                "roots": {
                    "description": "Root certificate(s) that will be used to verify the authenticity of the remote server.  roots is a case-sensitive string and may be one of:  file Relative or full path to a file. All certificates in the file will be used for path validation.  list of files Comma-separated list of relative or full file paths. Every PEM encoded certificate from each file will be used for path validation.  directory Relative or full path to a directory. Every PEM encoded certificate from each file in the directory will be used for path validation.",
                    "param": "roots",
                    "type": "optional argument"
                },
                "insecure": {
                    "description": "EXAMPLES Inspect a CRL:  $ step crl inspect --insecure http://ca.example.com/crls/exampleca.crl  Inspect and validate a CRL in a file:  $ step crl inspect --ca ca.crt exampleca.crl  Format the CRL in JSON:  $ step crl inspect --insecure --format json exampleca.crl  Inspect the CRL from the CRL distribution point of a given url:  $ step crl inspect --from https://www.google.com",
                    "type": "option"
                }
            }
        }
    },
    "crypto": {
        "__subcommands__": {
            "change-pass": "change password of an encrypted private key (PEM or JWK format)",
            "keypair": "generate a public / private keypair in PEM format",
            "jwk": "create JWKs (JSON Web Keys) and manage JWK Key Sets",
            "jwt": "sign and verify data using JSON Web Tokens (JWT)",
            "jwe": "encrypt and decrypt data and keys using JSON Web Encryption (JWE)",
            "jws": "sign and verify data using JSON Web Signature (JWS)",
            "jose": "collection of JOSE utilities",
            "hash": "generate and check hashes of files and directories",
            "kdf": "key derivation functions for password hashing and verification",
            "key": "manage keys",
            "nacl": "easy-to-use high-speed tools for encryption and signing",
            "otp": "generate and verify one-time passwords",
            "winpe": "extract certificates and verify Windows Portable Executable files"
        },
        "__arguements__": {
            "help": {
                "description": "show help",
                "alt_form": "h",
                "type": "option"
            }
        },
        "change-pass": {
            "__arguements__": {
                "key-file": {
                    "description": "The PEM or JWK file with the encrypted key.",
                    "type": "positional argument"
                },
                "password-file": {
                    "description": "The path to the file containing the password to decrypt the private key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "new-password-file": {
                    "description": "The path to the file containing the password to encrypt the private key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "out": {
                    "description": "The file new encrypted key path. Default to overwriting the key positional argument",
                    "param": "file",
                    "alt_form": "output-file",
                    "type": "optional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "insecure": {
                    "description": "",
                    "type": "option"
                },
                "no-password": {
                    "description": "Do not ask for a password to encrypt a private key. Sensitive key material will be written to disk unencrypted. This is not recommended. Requires --insecure flag.",
                    "type": "option"
                }
            }
        },
        "keypair": {
            "__arguements__": {
                "pub_file": {
                    "description": "The path to write the public key.",
                    "type": "positional argument"
                },
                "priv_file": {
                    "description": "The path to write the private key.",
                    "type": "positional argument"
                },
                "kty": {
                    "description": "The kty to build the certificate upon. If unset, default is EC.  kty is a case-sensitive string and must be one of:  EC Create an elliptic curve keypair  OKP Create an octet key pair (for \"Ed25519\" curve)  RSA Create an RSA keypair",
                    "param": "kty",
                    "type": "optional argument"
                },
                "size": {
                    "description": "The size (in bits) of the key for RSA and oct key types. RSA keys require a minimum key size of 2048 bits. If unset, default is 2048 bits for RSA keys and 128 bits for oct keys.",
                    "param": "size",
                    "type": "optional argument"
                },
                "crv": {
                    "description": "The elliptic curve to use for EC and OKP key types. Corresponds to the \"crv\" JWK parameter. Valid curves are defined in JWA [RFC7518]. If unset, default is P-256 for EC keys and Ed25519 for OKP keys.  curve is a case-sensitive string and must be one of:  P-256 NIST P-256 Curve  P-384 NIST P-384 Curve  P-521 NIST P-521 Curve  Ed25519 Ed25519 Curve",
                    "param": "curve",
                    "alt_form": "curve",
                    "type": "optional argument"
                },
                "from-jwk": {
                    "description": "Create a PEM representing the key encoded in an existing jwk-file instead of creating a new key.",
                    "param": "jwk-file",
                    "type": "optional argument"
                },
                "password-file": {
                    "description": "The path to the file containing the password to encrypt or decrypt the private key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "no-password": {
                    "description": "Do not ask for a password to encrypt a private key. Sensitive key material will be written to disk unencrypted. This is not recommended. Requires --insecure flag.",
                    "type": "option"
                },
                "insecure": {
                    "description": "-f, --force Force the overwrite of files without asking.",
                    "type": "option"
                }
            }
        },
        "jwk": {
            "__subcommands__": {
                "create": "create a JWK (JSON Web Key)",
                "keyset": "add, remove, and find JWKs in JWK Sets",
                "public": "extract a public JSON Web Key (JWK) from a private JWK",
                "thumbprint": "compute thumbprint for a JWK"
            },
            "__arguements__": {
                "help": {
                    "description": "show help",
                    "alt_form": "h",
                    "type": "option"
                }
            },
            "create": {
                "__arguements__": {
                    "public-jwk-file": {
                        "description": "Path to which the public JWK should be written",
                        "type": "positional argument"
                    },
                    "private-jwk-file": {
                        "description": "Path to which the (JWE encrypted) private JWK should be written",
                        "type": "positional argument"
                    },
                    "kty": {
                        "description": "The type of key to create. Corresponds to the \"kty\" JWK parameter. If unset, default is EC.  type is a case-sensitive string and must be one of:  EC Create an elliptic curve keypair  oct Create a symmetric key (octet stream)  OKP Create an octet key pair (for \"Ed25519\" curve)  RSA Create an RSA keypair",
                        "param": "type",
                        "alt_form": "type",
                        "type": "optional argument"
                    },
                    "size": {
                        "description": "The size (in bits) of the key for RSA and oct key types. RSA keys require a minimum key size of 2048 bits. If unset, default is 2048 bits for RSA keys and 128 bits for oct keys.",
                        "param": "size",
                        "type": "optional argument"
                    },
                    "crv": {
                        "description": "The elliptic curve to use for EC and OKP key types. Corresponds to the \"crv\" JWK parameter. Valid curves are defined in JWA [RFC7518]. If unset, default is P-256 for EC keys and Ed25519 for OKP keys.  curve is a case-sensitive string and must be one of:  P-256 NIST P-256 Curve  P-384 NIST P-384 Curve  P-521 NIST P-521 Curve  Ed25519 Ed25519 Curve",
                        "param": "curve",
                        "alt_form": "curve",
                        "type": "optional argument"
                    },
                    "alg": {
                        "description": "The algorithm intended for use with this key. Corresponds to the \"alg\" JWK parameter. algorithm is case-sensitive. If unset, the default depends on the key use, key type, and curve (for EC and OKP keys). Defaults are:  key type  use  curve  default algorithm EC                     sig               P-256               ES256 EC                     sig               P-384               ES384 EC                     sig               P-521               ES512 oct                    sig               N/A                 HS256 RSA                    sig               N/A                 RS256 OKP                    sig               Ed25519             EdDSA EC                     enc               P-256               ECDH-ES EC                     enc               P-384               ECDH-ES EC                     enc               P-521               ECDH-ES oct                    enc               N/A                 A256GCMKW RSA                    enc               N/A                 RSA-OAP-256  If the key \"use\" is \"sig\" (signing) algorithm must be one of:  HS256 HMAC using SHA-256  HS384 HMAC using SHA-384  HS512 HMAC using SHA-512  RS256 RSASSA-PKCS1-v1_5 using SHA-256  RS384 RSASSA-PKCS1-v1_5 using SHA-384  RS512 RSASSA-PKCS1-v1_5 using SHA-512  ES256 ECDSA using P-256 and SHA-256  ES384 ECDSA using P-384 and SHA-384  ES512 ECDSA using P-521 and SHA-512  PS256 RSASSA-PSS using SHA-256 and MGF1 with SHA-256  PS384 RSASSA-PSS using SHA-384 and MGF1 with SHA-384  PS512 RSASSA-PSS using SHA-512 and MGF1 with SHA-512  EdDSA EdDSA signature algorithm  If the key \"use\" is \"enc\" (encryption) algorithm must be one of:  RSA1_5 RSAES-PKCS1-v1_5  RSA-OAEP RSAES OAEP using default parameters  RSA-OAEP-256 RSAES OAEP using SHA-256 and MGF1 with SHA-256  A128KW AES Key Wrap with default initial value using 128-bit key  A192KW AES Key Wrap with default initial value using 192-bit key  A256KW AES Key Wrap with default initial value using 256-bit key  dir Direct use of a shared symmetric key as the content encryption key (CEK)  ECDH-ES Elliptic Curve Diffie-Hellman Ephemeral Static key agreement  ECDH-ES+A128KW ECDH-ES using Concat KDF and CEK wrapped with \"A128KW\"  ECDH-ES+A192KW ECDH-ES using Concat KDF and CEK wrapped with \"A192KW\"  ECDH-ES+A256KW ECDH-ES using Concat KDF and CEK wrapped with \"A256KW\"  A128GCMKW Key wrapping with AES GCM using 128-bit key  A192GCMKW Key wrapping with AES GCM using 192-bit key  A256GCMKW Key wrapping with AES GCM using 256-bit key  PBES2-HS256+A128KW PBES2 with HMAC SHA-256 and \"A128KW\" wrapping  PBES2-HS384+A192KW PBES2 with HMAC SHA-256 and \"A192KW\" wrapping  PBES2-HS512+A256KW PBES2 with HMAC SHA-256 and \"A256KW\" wrapping",
                        "param": "algorithm",
                        "alt_form": "algorithm",
                        "type": "optional argument"
                    },
                    "use": {
                        "description": "The intended use of the public key. Corresponds to the \"use\" JWK parameter. The \"use\" parameter indicates whether the public key is used for encrypting data or verifying the signature on data.  use is a case-sensitive string and may be one of:  sig The public key is used for verifying signatures.  enc The public key is used for encrypting data.  Other values may be used but the generated JWKs will not work for signing or encryption with this tool.",
                        "param": "use",
                        "type": "optional argument"
                    },
                    "kid": {
                        "description": "The kid (key ID) for this JWK. Corresponds to the \"kid\" JWK parameter. Used to identify an individual key in a JWK Set, for example. kid is a case-sensitive string. If unset, the JWK Thumbprint [RFC7638] is used as kid. See step help crypto jwk thumbprint for more information on JWK Thumbprints.",
                        "param": "kid",
                        "type": "optional argument"
                    },
                    "from-pem": {
                        "description": "Create a JWK representing the key encoded in an existing pem-file instead of creating a new key.",
                        "param": "pem-file",
                        "type": "optional argument"
                    },
                    "password-file": {
                        "description": "The path to the file containing the password to encrypt or decrypt the private key.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "no-password": {
                        "description": "Do not ask for a password to encrypt a private key. Sensitive key material will be written to disk unencrypted. This is not recommended. Requires --insecure flag.",
                        "type": "option"
                    },
                    "subtle": {
                        "description": "--insecure -f, --force Force the overwrite of files without asking.",
                        "type": "option"
                    }
                }
            },
            "keyset": {
                "__subcommands__": {
                    "add": "a JWK to a JWK Set",
                    "remove": "a JWK from a JWK Set",
                    "list": "key IDs of JWKs in a JWK Set",
                    "find": "a JWK in a JWK Set"
                },
                "__arguements__": {
                    "help": {
                        "description": "show help",
                        "alt_form": "h",
                        "type": "option"
                    }
                },
                "add": {
                    "__arguements__": {
                        "jwks-file": {
                            "description": "File containing a JWK Set",
                            "type": "positional argument"
                        }
                    }
                },
                "remove": {
                    "__arguements__": {
                        "jwks-file": {
                            "description": "File containing a JWK Set",
                            "type": "positional argument"
                        },
                        "kid": {
                            "description": "The key ID of the JWK to remove from the JWK Set. kid is a case-sensitive string.",
                            "param": "kid",
                            "type": "optional argument"
                        }
                    }
                },
                "list": {
                    "__arguements__": {
                        "jwks-file": {
                            "description": "File containing a JWK Set",
                            "type": "positional argument"
                        }
                    }
                },
                "find": {
                    "__arguements__": {
                        "jwks-file": {
                            "description": "File containing a JWK Set",
                            "type": "positional argument"
                        },
                        "kid": {
                            "description": "The key ID of the JWK to locate from the JWK Set. kid is a case-sensitive string.",
                            "param": "kid",
                            "type": "optional argument"
                        }
                    }
                }
            },
            "public": {},
            "thumbprint": {}
        },
        "jwt": {
            "__subcommands__": {
                "sign": "create a signed JWT data structure",
                "verify": "verify a signed JWT data structure and return the payload",
                "inspect": "return the decoded JWT without verification"
            },
            "__arguements__": {
                "help": {
                    "description": "show help",
                    "alt_form": "h",
                    "type": "option"
                }
            },
            "sign": {
                "__arguements__": {
                    "alg": {
                        "description": "The signature or MAC algorithm to use. Algorithms are case-sensitive strings defined in RFC7518. The selected algorithm must be compatible with the key type. This flag is optional. If not specified, the \"alg\" member of the JWK is used. If the JWK has no \"alg\" member then a default is selected depending on the JWK key type. If the JWK has an \"alg\" member and the \"alg\" flag is passed the two options must match unless the '--subtle' flag is also passed.  algorithm is a case-sensitive string and must be one of:  HS256 HMAC using SHA-256 (default for \"oct\" key type)  HS384 HMAC using SHA-384  HS512 HMAC using SHA-512  RS256 RSASSA-PKCS1-v1_5 using SHA-256 (default for \"RSA\" key type)  RS384 RSASSA-PKCS1-v1_5 using SHA-384  RS512 RSASSA-PKCS1-v1_5 using SHA-512  ES256 ECDSA using P-256 and SHA-256 (default for \"EC\" key type)  ES384 ECDSA using P-384 and SHA-384  ES512 ECDSA using P-521 and SHA-512  PS256 RSASSA-PSS using SHA-256 and MGF1 with SHA-256  PS384 RSASSA-PSS using SHA-384 and MGF1 with SHA-384  PS512 RSASSA-PSS using SHA-512 and MGF1 with SHA-512  EdDSA EdDSA signature algorithm",
                        "param": "algorithm",
                        "alt_form": "algorithm",
                        "type": "optional argument"
                    },
                    "iss": {
                        "description": "The issuer of this JWT. The processing of this claim is generally application specific. Typically, the issuer must match the name of some trusted entity (e.g., an identity provider like \"https://accounts.google.com\") and identify which key(s) to use for JWT verification and/or decryption (e.g., the keys at \"https://www.googleapis.com/oauth2/v3/certs\").  issuer is a case-sensitive string.",
                        "param": "issuer",
                        "alt_form": "issuer",
                        "type": "optional argument"
                    },
                    "aud": {
                        "description": "The intended recipient(s) of the JWT, encoded as the \"aud\" claim in the JWT. Recipient(s) must identify themselves with one or more of the values in the \"aud\" claim. The \"aud\" claim can be a string (indicating a single recipient) or an array (indicating multiple potential recipients). This flag can be used multiple times to generate a JWK with multiple intended recipients.  Each audience is a case-sensitive string.",
                        "param": "audience",
                        "alt_form": "audience",
                        "type": "optional argument"
                    },
                    "sub": {
                        "description": "The subject of this JWT. The \"claims\" are normally interpreted as statements about this subject. The subject must either be locally unique in the context of the issuer or globally unique. The processing of this claim is generally application specific.  subject is a case-sensitive string.",
                        "param": "subject",
                        "alt_form": "subject",
                        "type": "optional argument"
                    },
                    "exp": {
                        "description": "The expiration time on or after which the JWT must not be accepted. expiration must be a numeric value representing a Unix timestamp.",
                        "param": "expiration",
                        "alt_form": "expiration",
                        "type": "optional argument"
                    },
                    "nbf": {
                        "description": "The time before which the JWT must not be accepted. not-before must be a numeric value representing a Unix timestamp. If not provided, the current time is used.",
                        "param": "not-before",
                        "alt_form": "not-before",
                        "type": "optional argument"
                    },
                    "iat": {
                        "description": "The time at which the JWT was issued, used to determine the age of the JWT. ISSUED_AT must be a numeric value representing a Unix timestamp. If not provided, the current time is used.",
                        "param": "value",
                        "alt_form": "issued-at",
                        "type": "optional argument"
                    },
                    "jti": {
                        "description": "A unique identifier for the JWT. The identifier must be assigned in a manner that ensures that there is a negligible probability that the same value will be accidentally assigned to multiple JWTs. The JTI claim can be used to prevent a JWT from being replayed (i.e., recipient(s) can use jti to make a JWT one-time-use). The jti argument is a case-sensitive string. If the --jti flag is used without an argument a jti will be generated randomly with sufficient entropy to satisfy the collision-resistance criteria.",
                        "param": "jti",
                        "alt_form": "jwt-id",
                        "type": "optional argument"
                    },
                    "header": {
                        "description": "The key=value used as a header in the JWT token. Use the flag multiple times to set multiple headers.",
                        "param": "key",
                        "type": "optional argument"
                    },
                    "key": {
                        "description": "The file containing the key with which to sign the JWT. JWTs can be signed using a private JWK (or a JWK encrypted as a JWE payload) or a PEM encoded private key (or a private key encrypted using the modes described on RFC 1423 or with PBES2+PBKDF2 described in RFC 2898).",
                        "param": "file",
                        "alt_form": "x5c-key",
                        "type": "optional argument"
                    },
                    "jwks": {
                        "description": "The JWK Set containing the key to use to sign the JWT. The jwks argument should be the name of a file. The file contents should be a JWK Set or a JWE with a JWK Set payload. The --jwks flag requires the use of the --kid flag to specify which key to use.",
                        "param": "jwks",
                        "type": "optional argument"
                    },
                    "kid": {
                        "description": "The ID of the key used to sign the JWT. The kid argument is a case-sensitive string. When used with '--jwk' the kid value must match the \"kid\" member of the JWK. When used with --jwks (a JWK Set) the kid value must match the \"kid\" member of one of the JWKs in the JWK Set.",
                        "param": "kid",
                        "type": "optional argument"
                    },
                    "password-file": {
                        "description": "The path to the file containing the password to decrypt the key.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "x5c-cert": {
                        "description": "Certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                        "param": "chain",
                        "type": "optional argument"
                    },
                    "x5t-cert": {
                        "description": "Certificate file in PEM format to use for the 'x5t' header of a JWS or JWT",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "x5c-insecure": {
                        "description": "Use the JWT header 'x5cInsecure' instead of 'x5c'.",
                        "type": "option"
                    }
                }
            },
            "verify": {
                "__arguements__": {
                    "iss": {
                        "description": "The issuer of this JWT. The issuer must match the value of the \"iss\" claim in the JWT. issuer is a case-sensitive string. Required unless disabled with the --subtle flag.",
                        "param": "issuer",
                        "alt_form": "issuer",
                        "type": "optional argument"
                    },
                    "aud": {
                        "description": "The identity of the principal running this command. The audience specified must match one of the values in the \"aud\" claim, indicating the intended recipient(s) of the JWT. audience is a case-sensitive string. Required unless disabled with the --subtle flag.",
                        "param": "audience",
                        "alt_form": "audience",
                        "type": "optional argument"
                    },
                    "alg": {
                        "description": "The signature or MAC algorithm to use. Algorithms are case-sensitive strings defined in RFC7518. If the key used do verify the JWT is not a JWK, or if it is a JWK but does not have an \"alg\" member indicating its the intended algorithm for use with the key, then the --alg flag is required to prevent algorithm downgrade attacks. To disable this protection you can pass the --insecure flag and omit the --alg flag.",
                        "param": "algorithm",
                        "alt_form": "algorithm",
                        "type": "optional argument"
                    },
                    "key": {
                        "description": "The file containing the key to use to verify the JWT. The contents of the file can be a public or private JWK (or a JWK encrypted as a JWE payload) or a public or private PEM (or a private key encrypted using the modes described on RFC 1423 or with PBES2+PBKDF2 described in RFC 2898).",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "jwks": {
                        "description": "The JWK Set containing the key to use to verify the JWS. The jwks argument should be the name of a file. The file contents should be a JWK Set or a JWE with a JWK Set payload. The JWS being verified should have a \"kid\" member that matches the \"kid\" of one of the JWKs in the JWK Set. If the JWS does not have a \"kid\" member the '--kid' flag can be used.",
                        "param": "jwks",
                        "type": "optional argument"
                    },
                    "kid": {
                        "description": "The ID of the key used to sign the JWK, used to select a JWK from a JWK Set. The KID argument is a case-sensitive string. If the input JWS has a \"kid\" member its value must match kid or verification will fail.",
                        "param": "kid",
                        "type": "optional argument"
                    },
                    "password-file": {
                        "description": "The path to the file containing the password to decrypt the key.",
                        "param": "file",
                        "type": "optional argument"
                    }
                }
            },
            "inspect": {}
        },
        "jwe": {
            "__subcommands__": {
                "encrypt": "encrypt a payload using JSON Web Encryption (JWE)",
                "decrypt": "verify a JWE and decrypt ciphertext"
            },
            "__arguements__": {
                "help": {
                    "description": "show help",
                    "alt_form": "h",
                    "type": "option"
                }
            },
            "encrypt": {
                "__arguements__": {
                    "alg": {
                        "description": "The cryptographic algorithm used to encrypt or determine the value of the content encryption key (CEK). Algorithms are case-sensitive strings defined in RFC7518. The selected algorithm must be compatible with the key type. This flag is optional. If not specified, the \"alg\" member of the JWK is used. If the JWK has no \"alg\" member then a default is selected depending on the JWK key type. If the JWK has an \"alg\" member and the --alg flag is passed the two options must match unless the --subtle flag is also passed.  key-enc-algorithm is a case-sensitive string and must be one of:  RSA1_5 RSAES-PKCS1-v1_5  RSA-OAEP RSAES OAEP using default parameters  RSA-OAEP-256 (default for RSA keys) RSAES OAEP using SHA-256 and MGF1 with SHA-256  A128KW AES Key Wrap with default initial value using 128-bit key  A192KW AES Key Wrap with default initial value using 192-bit key  A256KW AES Key Wrap with default initial value using 256-bit key  dir Direct use of a shared symmetric key as the content encryption key (CEK)  ECDH-ES (default for EC keys) Elliptic Curve Diffie-Hellman Ephemeral Static key agreement  ECDH-ES+A128KW ECDH-ES using Concat KDF and CEK wrapped with \"A128KW  ECDH-ES+A192KW ECDH-ES using Concat KDF and CEK wrapped with \"A192KW  ECDH-ES+A256KW ECDH-ES using Concat KDF and CEK wrapped with \"A256KW  A128GCMKW Key wrapping with AES GCM using 128-bit key  A192GCMKW Key wrapping with AES GCM using 192-bit key  A256GCMKW (default for oct keys) Key wrapping with AES GCM using 256-bit key  PBES2-HS256+A128KW PBES2 with HMAC SHA-256 and \"A128KW\" wrapping  PBES2-HS384+A192KW PBES2 with HMAC SHA-256 and \"A192KW\" wrapping  PBES2-HS512+A256KW PBES2 with HMAC SHA-256 and \"A256KW\" wrapping",
                        "param": "key-enc-algorithm",
                        "alt_form": "algorithm",
                        "type": "optional argument"
                    },
                    "enc": {
                        "description": "--encryption-algorithm=content-enc-algorithm The cryptographic content encryption algorithm used to perform authenticated encryption on the plaintext payload (the content) to produce ciphertext and the authentication tag.  content-enc-algorithm is a case-sensitive string and must be one of:  A128CBC-HS256 AES_128_CBC_HMAC_SHA_256 authenticated encryption algorithm  A192CBC-HS384 AES_192_CBC_HMAC_SHA_384 authenticated encryption algorithm  A256CBC-HS512 AES_256_CBC_HMAC_SHA_512 authenticated encryption algorithm  A128GCM AES GCM using 128-bit key  A192GCM AES GCM using 192-bit key  A256GCM (default) AES GCM using 256-bit key",
                        "param": "content-enc-algorithm",
                        "type": "optional argument"
                    },
                    "key": {
                        "description": "The file containing the JWE recipient's public key. JWEs can be encrypted for a recipient using a public JWK or a PEM encoded public key.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "jwks": {
                        "description": "The JWK Set containing the recipient's public key. The jwks argument should be the name of a file. The file contents should be a JWK Set. The --jwks flag requires the use of the --kid flag to specify which key to use.",
                        "param": "jwks",
                        "type": "optional argument"
                    },
                    "kid": {
                        "description": "The ID of the recipient's public key. kid is a case-sensitive string. When used with --key the kid value must match the \"kid\" member of the JWK. When used with --jwks (a JWK Set) the kid value must match the \"kid\" member of one of the JWKs in the JWK Set.",
                        "param": "kid",
                        "type": "optional argument"
                    },
                    "typ": {
                        "description": "The media type of the JWE, used for disambiguation in applications where more than one type of JWE may be processed. While this parameter might be useful to applications, it is ignored by JWE implementations.",
                        "param": "value",
                        "alt_form": "type",
                        "type": "optional argument"
                    },
                    "cty": {
                        "description": "The media type of the JWE payload, used for disambiguation of JWE objects in applications where more than one JWE payload type may be present. This parameter is ignored by JWE implementations, but may be processed by applications that use JWE.",
                        "param": "value",
                        "alt_form": "content-type",
                        "type": "optional argument"
                    }
                }
            },
            "decrypt": {
                "__arguements__": {
                    "key": {
                        "description": "The argument should be the name of a file containing a private JWK (or a JWK encrypted as a JWE payload) or a PEM encoded private key (or a private key encrypted using the modes described on RFC 1423 or with PBES2+PBKDF2 described in RFC 2898).",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "jwks": {
                        "description": "The JWK Set containing the recipient's private key. The jwks argument should be the name of a file. The file contents should be a JWK Set or a JWE with a JWK Set payload. The --jwks flag requires the use of the --kid flag to specify which key to use.",
                        "param": "jwks",
                        "type": "optional argument"
                    },
                    "kid": {
                        "description": "The ID of the recipient's private key. kid is a case-sensitive string. When used with --key the kid value must match the \"kid\" member of the JWK. When used with --jwks (a JWK Set) the KID value must match the \"kid\" member of one of the JWKs in the JWK Set.",
                        "param": "kid",
                        "type": "optional argument"
                    }
                }
            }
        },
        "jws": {
            "__subcommands__": {
                "sign": "create a signed JWS data structure",
                "inspect": "return the decoded JWS without verification",
                "verify": "verify a signed JWS data structure and return the payload"
            },
            "__arguements__": {
                "help": {
                    "description": "show help",
                    "alt_form": "h",
                    "type": "option"
                }
            },
            "sign": {
                "__arguements__": {
                    "alg": {
                        "description": "The signature or MAC algorithm to use. Algorithms are case-sensitive strings defined in RFC7518. The selected algorithm must be compatible with the key type. This flag is optional. If not specified, the \"alg\" member of the JWK is used. If the JWK has no \"alg\" member then a default is selected depending on the JWK key type. If the JWK has an \"alg\" member and the \"alg\" flag is passed the two options must match unless the '--subtle' flag is also passed.  algorithm is a case-sensitive string and must be one of:  HS256 HMAC using SHA-256 (default for \"oct\" key type)  HS384 HMAC using SHA-384  HS512 HMAC using SHA-512  RS256 RSASSA-PKCS1-v1_5 using SHA-256 (default for \"RSA\" key type)  RS384 RSASSA-PKCS1-v1_5 using SHA-384  RS512 RSASSA-PKCS1-v1_5 using SHA-512  ES256 ECDSA using P-256 and SHA-256 (default for \"EC\" key type)  ES384 ECDSA using P-384 and SHA-384  ES512 ECDSA using P-521 and SHA-512  PS256 RSASSA-PSS using SHA-256 and MGF1 with SHA-256  PS384 RSASSA-PSS using SHA-384 and MGF1 with SHA-384  PS512 RSASSA-PSS using SHA-512 and MGF1 with SHA-512  EdDSA EdDSA signature algorithm",
                        "param": "algorithm",
                        "alt_form": "algorithm",
                        "type": "optional argument"
                    },
                    "jku": {
                        "description": "The \"jku\" (JWK Set URL) Header Parameter is a URI that refers to a resource for a set of JSON-encoded public keys, one of which corresponds to the key used to digitally sign the JWS. The keys MUST be encoded as a JWK Set (JWK). The protocol used to acquire the resource MUST provide integrity protection; an HTTP GET request to retrieve the JWK Set MUST use Transport Layer Security (TLS); and the identity of the server MUST be validated. Use of jwk-url is optional.",
                        "param": "jwk-url",
                        "type": "optional argument"
                    },
                    "jwk": {
                        "description": "The \"jwk\" (JSON Web Key) Header Parameter is the public key that corresponds to the key used to digitally sign the JWS. This key is represented as a JSON Web Key (JWK). Use of jwk is optional.",
                        "param": "jwk",
                        "type": "optional argument"
                    },
                    "typ": {
                        "description": "The \"typ\" (type) Header Parameter is used by JWS applications to declare the media type of this complete JWS. This is intended for use by the application when more than one kind of object could be present in an application data structure that can contain a JWS; the application can use this value to disambiguate among the different kinds of objects that might be present. It will typically not be used by applications when the kind of object is already known. This parameter is ignored by JWS implementations; any processing of this parameter is performed by the JWS application. Use of type is optional.  The \"typ\" value \"JOSE\" can be used by applications to indicate that this object is a JWS or JWE using the JWS Compact Serialization or the JWE Compact Serialization. The \"typ\" value \"JOSE+JSON\" can be used by applications to indicate that this object is a JWS or JWE using the JWS JSON Serialization or the JWE JSON Serialization. Other type values can also be used by applications.",
                        "param": "type",
                        "alt_form": "type",
                        "type": "optional argument"
                    },
                    "cty": {
                        "description": "The \"cty\" (content type) Header Parameter is used by JWS applications to declare the media type of the secured content (the payload). This is intended for use by the application when more than one kind of object could be present in the JWS Payload; the application can use this value to disambiguate among the different kinds of objects that might be present. It will typically not be used by applications when the kind of object is already known. This parameter is ignored by JWS implementations; any processing of this parameter is performed by the JWS application. Use of content-type is optional.",
                        "param": "content-type",
                        "type": "optional argument"
                    },
                    "key": {
                        "description": "The file containing the key with which to sign the JWS. JWSs can be signed using a private JWK (or a JWK encrypted as a JWE payload) or a PEM encoded private key (or a private key encrypted using the modes described on RFC 1423 or with PBES2+PBKDF2 described in RFC 2898).",
                        "param": "file",
                        "alt_form": "x5c-key",
                        "type": "optional argument"
                    },
                    "jwks": {
                        "description": "The JWK Set containing the key to use to sign the JWS. The jwks argument should be the name of a file. The file contents should be a JWK Set or a JWE with a JWK Set payload. The --jwks flag requires the use of the --kid flag to specify which key to use.",
                        "param": "jwks",
                        "type": "optional argument"
                    },
                    "kid": {
                        "description": "The ID of the key used to sign the JWS. The kid argument is a case-sensitive string. When used with '--jwk' the kid value must match the \"kid\" member of the JWK. When used with --jwks (a JWK Set) the kid value must match the \"kid\" member of one of the JWKs in the JWK Set.",
                        "param": "kid",
                        "type": "optional argument"
                    },
                    "password-file": {
                        "description": "The path to the file containing the password to encrypt or decrypt the private key.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "x5c-cert": {
                        "description": "Certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                        "param": "chain",
                        "type": "optional argument"
                    },
                    "x5t-cert": {
                        "description": "Certificate file in PEM format to use for the 'x5t' header of a JWS or JWT",
                        "param": "file",
                        "type": "optional argument"
                    }
                }
            },
            "inspect": {
                "__arguements__": {
                    "json": {
                        "description": "Displays the header, payload and signature as a JSON object. The payload will be encoded using Base64.",
                        "type": "option"
                    }
                }
            },
            "verify": {
                "__arguements__": {
                    "alg": {
                        "description": "The signature or MAC algorithm to use. Algorithms are case-sensitive strings defined in RFC7518. If the key used do verify the JWS is not a JWK, or if it is a JWK but does not have an \"alg\" member indicating its the intended algorithm for use with the key, then the --alg flag is required to prevent algorithm downgrade attacks. To disable this protection you can pass the --insecure flag and omit the --alg flag.",
                        "param": "algorithm",
                        "alt_form": "algorithm",
                        "type": "optional argument"
                    },
                    "key": {
                        "description": "The file containing the key with which to verify the JWS. The contents of the file can be a public or private JWK (or a JWK encrypted as a JWE payload) or a public or private PEM (or a private key encrypted using the modes described on RFC 1423 or with PBES2+PBKDF2 described in RFC 2898).",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "jwks": {
                        "description": "The JWK Set containing the key to use to verify the JWS. The jwks argument should be the name of a file. The file contents should be a JWK Set or a JWE with a JWK Set payload. The JWS being verified should have a \"kid\" member that matches the \"kid\" of one of the JWKs in the JWK Set. If the JWS does not have a \"kid\" member the '--kid' flag can be used.",
                        "param": "jwks",
                        "type": "optional argument"
                    },
                    "kid": {
                        "description": "The ID of the key used to sign the JWK, used to select a JWK from a JWK Set. The KID argument is a case-sensitive string. If the input JWS has a \"kid\" member its value must match kid or verification will fail.",
                        "param": "kid",
                        "type": "optional argument"
                    },
                    "json": {
                        "description": "Displays the header, payload and signature as a JSON object. The payload will be encoded using Base64.",
                        "type": "option"
                    }
                }
            }
        },
        "jose": {
            "__subcommands__": {
                "format": "swap serialization format"
            },
            "__arguements__": {
                "help": {
                    "description": "show help",
                    "alt_form": "h",
                    "type": "option"
                }
            },
            "format": {}
        },
        "hash": {
            "__subcommands__": {
                "digest": "generate a hash digest of a file or directory",
                "compare": "verify the hash digest for a file or directory matches an expected value"
            },
            "__arguements__": {
                "help": {
                    "description": "show help",
                    "alt_form": "h",
                    "type": "option"
                }
            },
            "digest": {
                "__arguements__": {
                    "file-or-directory": {
                        "description": "The path to a file or directory to hash.",
                        "type": "positional argument"
                    },
                    "alg": {
                        "description": "The hash algorithm to use.  algorithm must be one of:  sha1 (or sha) SHA-1 produces a 160-bit hash value  sha224 SHA-224 produces a 224-bit hash value  sha256 (default) SHA-256 produces a 256-bit hash value  sha384 SHA-384 produces a 384-bit hash value  sha512 SHA-512 produces a 512-bit hash value  sha512-224 SHA-512/224 uses SHA-512 and truncates the output to 224 bits  sha512-256 SHA-512/256 uses SHA-512 and truncates the output to 256 bits  md5 (requires --insecure) MD5 produces a 128-bit hash value",
                        "param": "algorithm",
                        "type": "optional argument"
                    }
                }
            },
            "compare": {
                "__arguements__": {
                    "hash": {
                        "description": "The expected hash digest",
                        "type": "positional argument"
                    },
                    "file-or-directory": {
                        "description": "The path to a file or directory to hash.",
                        "type": "positional argument"
                    },
                    "alg": {
                        "description": "The hash algorithm to use.  algorithm must be one of:  sha1 (or sha) SHA-1 produces a 160-bit hash value  sha224 SHA-224 produces a 224-bit hash value  sha256 (default) SHA-256 produces a 256-bit hash value  sha384 SHA-384 produces a 384-bit hash value  sha512 SHA-512 produces a 512-bit hash value  sha512-224 SHA-512/224 produces a 224-bit hash value  sha512-256 SHA-512/256 produces a 256-bit hash value  md5 (requires --insecure) MD5 produces a 128-bit hash value",
                        "param": "algorithm",
                        "type": "optional argument"
                    }
                }
            }
        },
        "kdf": {
            "__subcommands__": {
                "hash": "derive a secret key from a secret value (e.g., a password)",
                "compare": "compare a plaintext value (e.g., a password) and a hash"
            },
            "__arguements__": {
                "help": {
                    "description": "show help",
                    "alt_form": "h",
                    "type": "option"
                }
            },
            "hash": {
                "__arguements__": {
                    "input": {
                        "description": "The input to the key derivation function. input is optional and its use is not recommended. If this argument is provided the --insecure flag must also be provided because your (presumably secret) input will likely be logged and appear in places you might not expect. If omitted input is read from STDIN.",
                        "type": "positional argument"
                    },
                    "alg": {
                        "description": "The KDF algorithm to use.  algorithm must be one of:  scrypt A password-based KDF designed to use exponential time and memory.  bcrypt A password-based KDF designed to use exponential time.  argon2i A password-based KDF optimized to resist side-channel attacks.  argon2id A password-based KDF optimized to resist GPU and side-channel attacks.",
                        "param": "algorithm",
                        "type": "optional argument"
                    }
                }
            },
            "compare": {}
        },
        "key": {
            "__subcommands__": {
                "format": "reformat a public or private key",
                "public": "print the public key from a private key or certificate",
                "inspect": "print key details in human readable format",
                "fingerprint": "print the fingerprint of a public key",
                "sign": "sign a message using an asymmetric key",
                "verify": "verify a signed message"
            },
            "__arguements__": {
                "help": {
                    "description": "show help",
                    "alt_form": "h",
                    "type": "option"
                }
            },
            "format": {
                "__arguements__": {
                    "key-file": {
                        "description": "Path to a file with a public or private key, or the public key of an X.509 certificate.",
                        "type": "positional argument"
                    },
                    "pkcs8": {
                        "description": "Convert RSA and ECDSA private keys to PKCS#8 PEM/DER format.",
                        "type": "option"
                    },
                    "pem": {
                        "description": "Uses PEM as the result encoding format. If neither --pem nor --der nor --ssh nor --jwk are set it will always switch to the DER format.",
                        "type": "option"
                    },
                    "der": {
                        "description": "Uses DER as the result enconfig format. If neither --pem nor --der nor --ssh nor --jwk are set it will always switch to the PEM format.",
                        "type": "option"
                    },
                    "ssh": {
                        "description": "Uses OpenSSH as the result encoding format.",
                        "type": "option"
                    },
                    "jwk": {
                        "description": "Uses JSON Web Key as the result encoding format.",
                        "type": "option"
                    },
                    "out": {
                        "description": "Path to write the reformatted result.",
                        "param": "value",
                        "type": "optional argument"
                    },
                    "password-file": {
                        "description": "Location of file containing passphrase to decrypt private key.",
                        "param": "value",
                        "type": "optional argument"
                    },
                    "no-password": {
                        "description": "Do not ask for a password to encrypt a private key with PEM format. Sensitive key material will be written to disk unencrypted. This is not recommended. Requires --insecure flag.",
                        "type": "option"
                    },
                    "insecure": {
                        "description": "",
                        "type": "option"
                    },
                    "f": {
                        "description": "Force the overwrite of files without asking.",
                        "alt_form": "force",
                        "type": "option"
                    }
                }
            },
            "public": {
                "__arguements__": {
                    "key-file": {
                        "description": "Path to a private key.",
                        "type": "positional argument"
                    },
                    "out": {
                        "description": "The file to write the public key.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "password-file": {
                        "description": "The path to the file containing the password to encrypt or decrypt the private key.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "f": {
                        "description": "Force the overwrite of files without asking.",
                        "alt_form": "force",
                        "type": "option"
                    }
                }
            },
            "inspect": {
                "__arguements__": {
                    "key-file": {
                        "description": "Path to a public or private key.",
                        "type": "positional argument"
                    },
                    "password-file": {
                        "description": "The path to the file containing passphrase to decrypt private key.",
                        "param": "file",
                        "type": "optional argument"
                    }
                }
            },
            "fingerprint": {
                "__arguements__": {
                    "key-file": {
                        "description": "Path to a public, private key, certificate (X.509 and SSH) or certificate request.",
                        "type": "positional argument"
                    },
                    "sha1": {
                        "description": "Use the SHA-1 hash with hexadecimal format. The result will be equivalent to the Subject Key Identifier in a X.509 certificate.",
                        "type": "option"
                    },
                    "ssh": {
                        "description": "Use the SSH marshaling format instead of X.509.",
                        "type": "option"
                    },
                    "password-file": {
                        "description": "The path to the file containing passphrase to decrypt a private key.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "raw": {
                        "description": "Print the raw bytes instead of the fingerprint. These bytes can be piped to a different hash command.",
                        "type": "option"
                    },
                    "format": {
                        "description": "The format of the fingerprint, it must be \"hex\", \"base64\", \"base64-url\", \"base64-raw\", \"base64-url-raw\" or \"emoji\".",
                        "param": "format",
                        "type": "optional argument"
                    }
                }
            },
            "sign": {
                "__arguements__": {
                    "file": {
                        "description": "File to sign",
                        "type": "positional argument"
                    },
                    "key": {
                        "description": "The path to the file containing the private key.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "alg": {
                        "description": "The hash algorithm to use on RSA PKCS #1 1.5 and RSA-PSS signatures.  algorithm must be one of:  sha1 (or sha) SHA-1 produces a 160-bit hash value  sha224 SHA-224 produces a 224-bit hash value  sha256 (default) SHA-256 produces a 256-bit hash value  sha384 SHA-384 produces a 384-bit hash value  sha512 SHA-512 produces a 512-bit hash value  sha512-224 SHA-512/224 uses SHA-512 and truncates the output to 224 bits  sha512-256 SHA-512/256 uses SHA-512 and truncates the output to 256 bits  md5 MD5 produces a 128-bit hash value",
                        "param": "algorithm",
                        "type": "optional argument"
                    },
                    "pss": {
                        "description": "Use RSA-PSS signature scheme.",
                        "type": "option"
                    },
                    "raw": {
                        "description": "Print the raw bytes instead of the base64 format.",
                        "type": "option"
                    },
                    "password-file": {
                        "description": "The path to the file containing passphrase to decrypt the private key.",
                        "param": "file",
                        "type": "optional argument"
                    }
                }
            },
            "verify": {
                "__arguements__": {
                    "file": {
                        "description": "File to verify.",
                        "type": "positional argument"
                    },
                    "key": {
                        "description": "The path to the file containing the public key.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "signature": {
                        "description": "The base64 version of the signature.",
                        "param": "base64",
                        "alt_form": "sig",
                        "type": "optional argument"
                    },
                    "alg": {
                        "description": "The hash algorithm to use on RSA PKCS #1 1.5 and RSA-PSS signatures.  algorithm must be one of:  sha1 (or sha) SHA-1 produces a 160-bit hash value  sha224 SHA-224 produces a 224-bit hash value  sha256 (default) SHA-256 produces a 256-bit hash value  sha384 SHA-384 produces a 384-bit hash value  sha512 SHA-512 produces a 512-bit hash value  sha512-224 SHA-512/224 uses SHA-512 and truncates the output to 224 bits  sha512-256 SHA-512/256 uses SHA-512 and truncates the output to 256 bits  md5 MD5 produces a 128-bit hash value",
                        "param": "algorithm",
                        "type": "optional argument"
                    },
                    "pss": {
                        "description": "Verify using the RSA-PSS signature scheme.",
                        "type": "option"
                    }
                }
            }
        },
        "nacl": {
            "__subcommands__": {
                "auth": "authenticate a message using a secret key",
                "box": "authenticate and encrypt small messages using public-key cryptography",
                "secretbox": "encrypt and authenticate small messages using secret-key cryptography",
                "sign": "sign small messages using public-key cryptography"
            },
            "__arguements__": {
                "help": {
                    "description": "show help",
                    "alt_form": "h",
                    "type": "option"
                }
            },
            "auth": {
                "__subcommands__": {
                    "digest": "generate a 32-byte digest for a message",
                    "verify": "validate a digest for a message"
                },
                "__arguements__": {
                    "help": {
                        "description": "show help",
                        "alt_form": "h",
                        "type": "option"
                    }
                },
                "digest": {},
                "verify": {}
            },
            "box": {
                "__subcommands__": {
                    "keypair": "generate a key for use with seal and open",
                    "open": "authenticate and decrypt a box produced by seal",
                    "seal": "produce an authenticated and encrypted ciphertext"
                },
                "__arguements__": {
                    "help": {
                        "description": "show help",
                        "alt_form": "h",
                        "type": "option"
                    }
                },
                "keypair": {
                    "__arguements__": {
                        "pub-file": {
                            "description": "The path to write the public key.",
                            "type": "positional argument"
                        },
                        "priv-file": {
                            "description": "The path to write the encrypted private key.",
                            "type": "positional argument"
                        },
                        "f": {
                            "description": "Force the overwrite of files without asking.",
                            "alt_form": "force",
                            "type": "option"
                        }
                    }
                },
                "open": {
                    "__arguements__": {
                        "nonce": {
                            "description": "The nonce provided when the box was sealed.  To use a binary nonce use the prefix 'base64:' and the standard base64 encoding. e.g. base64:081D3pFPBkwx1bURR9HQjiYbAUxigo0Z",
                            "type": "positional argument"
                        },
                        "sender-pub-key": {
                            "description": "The path to the public key of the peer that produced the sealed box.",
                            "type": "positional argument"
                        },
                        "priv-key": {
                            "description": "The path to the private key used to open the box.",
                            "type": "positional argument"
                        },
                        "raw": {
                            "description": "Indicates that input is not base64 encoded",
                            "type": "option"
                        }
                    }
                },
                "seal": {
                    "__arguements__": {
                        "nonce": {
                            "description": "Must be unique for each distinct message for a given pair of keys.  To use a binary nonce use the prefix 'base64:' and the standard base64 encoding. e.g. base64:081D3pFPBkwx1bURR9HQjiYbAUxigo0Z",
                            "type": "positional argument"
                        },
                        "recipient-pub-key": {
                            "description": "The path to the public key of the intended recipient of the sealed box.",
                            "type": "positional argument"
                        },
                        "priv-key": {
                            "description": "The path to the private key used for authentication.",
                            "type": "positional argument"
                        },
                        "raw": {
                            "description": "Do not base64 encode output",
                            "type": "option"
                        }
                    }
                }
            },
            "secretbox": {
                "__subcommands__": {
                    "open": "authenticate and decrypt a box produced by seal",
                    "seal": "produce an encrypted ciphertext"
                },
                "__arguements__": {
                    "help": {
                        "description": "show help",
                        "alt_form": "h",
                        "type": "option"
                    }
                },
                "open": {
                    "__arguements__": {
                        "nonce": {
                            "description": "The nonce provided when the secretbox was sealed.  To use a binary nonce use the prefix 'base64:' and the standard base64 encoding. e.g. base64:081D3pFPBkwx1bURR9HQjiYbAUxigo0Z",
                            "type": "positional argument"
                        },
                        "key-file": {
                            "description": "The path to the shared key.",
                            "type": "positional argument"
                        },
                        "raw": {
                            "description": "Indicates that input is not base64 encoded",
                            "type": "option"
                        }
                    }
                },
                "seal": {
                    "__arguements__": {
                        "nonce": {
                            "description": "Must be unique for each distinct message for a given key.  To use a binary nonce use the prefix 'base64:' and the standard base64 encoding. e.g. base64:081D3pFPBkwx1bURR9HQjiYbAUxigo0Z",
                            "type": "positional argument"
                        },
                        "key-file": {
                            "description": "The path to the shared key.",
                            "type": "positional argument"
                        },
                        "raw": {
                            "description": "Do not base64 encode output",
                            "type": "option"
                        }
                    }
                }
            },
            "sign": {
                "__subcommands__": {
                    "keypair": "generate a pair for use with sign and open",
                    "open": "verify a signed message produced by sign",
                    "sign": "sign a message using Ed25519"
                },
                "__arguements__": {
                    "help": {
                        "description": "show help",
                        "alt_form": "h",
                        "type": "option"
                    }
                },
                "keypair": {
                    "__arguements__": {
                        "f": {
                            "description": "Force the overwrite of files without asking.",
                            "alt_form": "force",
                            "type": "option"
                        }
                    }
                },
                "open": {
                    "__arguements__": {
                        "raw": {
                            "description": "Indicates that input is not base64 encoded",
                            "type": "option"
                        }
                    }
                },
                "sign": {
                    "__arguements__": {
                        "raw": {
                            "description": "Do not base64 encode output",
                            "type": "option"
                        }
                    }
                }
            }
        },
        "otp": {
            "__subcommands__": {
                "generate": "generate a one-time password",
                "verify": "verify a one-time password"
            },
            "__arguements__": {
                "help": {
                    "description": "show help",
                    "alt_form": "h",
                    "type": "option"
                }
            },
            "generate": {
                "__arguements__": {
                    "issuer": {
                        "description": "Name of the issuing organization (e.g., smallstep.com)",
                        "param": "value",
                        "alt_form": "iss",
                        "type": "optional argument"
                    },
                    "account": {
                        "description": "Name of the user's account (e.g., a username or email address)",
                        "param": "value",
                        "type": "optional argument"
                    },
                    "period": {
                        "description": "Number of seconds a TOTP hash is valid. Defaults to 30 seconds.",
                        "param": "value",
                        "type": "optional argument"
                    },
                    "length": {
                        "description": "Length of one-time passwords. Defaults to 6.",
                        "param": "value",
                        "alt_form": "digits",
                        "type": "optional argument"
                    },
                    "secret-size": {
                        "description": "Size of generated TOTP secret. Defaults to 20.",
                        "param": "value",
                        "type": "optional argument"
                    },
                    "alg": {
                        "description": "Algorithm to use for HMAC. Defaults to SHA1. Must be one of: SHA1, SHA256, SHA512",
                        "param": "value",
                        "alt_form": "algorithm",
                        "type": "optional argument"
                    },
                    "url": {
                        "description": "Output a TOTP Key URI. See https://github.com/google/google-authenticator/wiki/Key-Uri-Format",
                        "type": "option"
                    },
                    "qr": {
                        "description": "Write a QR code to the specified path",
                        "param": "value",
                        "type": "optional argument"
                    },
                    "f": {
                        "description": "Force the overwrite of files without asking.",
                        "alt_form": "force",
                        "type": "option"
                    }
                }
            },
            "verify": {
                "__arguements__": {
                    "secret": {
                        "description": "The file containing TOTP secret.",
                        "param": "file",
                        "type": "optional argument"
                    },
                    "period": {
                        "description": "Number of seconds a TOTP hash is valid. Defaults to 30 seconds.",
                        "param": "value",
                        "type": "optional argument"
                    },
                    "skew": {
                        "description": "Periods before or after current time to allow. Defaults to 0. Values greater than 1 require '--insecure' flag.",
                        "param": "value",
                        "type": "optional argument"
                    },
                    "length": {
                        "description": "Length of one-time passwords. Defaults to 6 digits.",
                        "param": "value",
                        "alt_form": "digits",
                        "type": "optional argument"
                    },
                    "alg": {
                        "description": "Algorithm to use for HMAC. Defaults to SHA1. Must be one of: SHA1, SHA256, SHA512",
                        "param": "value",
                        "alt_form": "algorithm",
                        "type": "optional argument"
                    },
                    "time": {
                        "description": "The time|duration to use for TOTP validation. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\". A duration value is added to the current time. An empty time|duration defaults to \"time.Now()\".",
                        "param": "time|duration",
                        "type": "optional argument"
                    }
                }
            }
        },
        "winpe": {
            "__subcommands__": {
                "extract": "extract certificates from Windows Portable Executable files"
            },
            "__arguements__": {
                "help": {
                    "description": "show help",
                    "alt_form": "h",
                    "type": "option"
                }
            },
            "extract": {
                "__arguements__": {
                    "file": {
                        "description": "The path to a Windows Portable Executable file",
                        "type": "positional argument"
                    }
                }
            }
        }
    },
    "oauth": {
        "__arguements__": {
            "provider": {
                "description": "OAuth provider for authentication",
                "param": "value",
                "alt_form": "idp",
                "type": "optional argument"
            },
            "email": {
                "description": "Email to authenticate",
                "param": "value",
                "alt_form": "e",
                "type": "optional argument"
            },
            "console": {
                "description": "Complete the flow while remaining only inside the terminal. This flag defaults to use the Device Authorization Grant flow.",
                "alt_form": "c",
                "type": "option"
            },
            "console-flow": {
                "description": "The alternative OAuth flow to use for input constrained devices.  console-flow is a case-insensitive string and must be one of:  device Use the Device Authorization Grant (https://datatracker.ietf.org/doc/html/rfc8628#section-3.2) flow  oob Use the Out of Band (OOB) flow",
                "param": "flow",
                "type": "optional argument"
            },
            "client-id": {
                "description": "OAuth Client ID",
                "param": "value",
                "type": "optional argument"
            },
            "client-secret": {
                "description": "OAuth Client Secret",
                "param": "value",
                "type": "optional argument"
            },
            "account": {
                "description": "JSON file containing account details",
                "param": "value",
                "type": "optional argument"
            },
            "authorization-endpoint": {
                "description": "OAuth Authorization Endpoint",
                "param": "value",
                "type": "optional argument"
            },
            "device-authorization-endpoint": {
                "description": "OAuth Device Authorization Endpoint",
                "param": "value",
                "type": "optional argument"
            },
            "token-endpoint": {
                "description": "OAuth Token Endpoint",
                "param": "value",
                "type": "optional argument"
            },
            "header": {
                "description": "Output HTTP Authorization Header (suitable for use with curl)",
                "type": "option"
            },
            "oidc": {
                "description": "Output OIDC Token instead of OAuth Access Token",
                "type": "option"
            },
            "bare": {
                "description": "Only output the token",
                "type": "option"
            },
            "scope": {
                "description": "OAuth scopes",
                "param": "value",
                "type": "optional argument"
            },
            "auth-param": {
                "description": "OAuth additional authentication parameters to include as part of the URL query. Use this flag multiple times to add multiple parameters. This flag expects a 'key' and 'value' in the format '--auth-param \"key=value\"'.",
                "param": "value",
                "type": "optional argument"
            },
            "prompt": {
                "description": "Whether the Authorization Server prompts the End-User for reauthentication and consent. OpenID standard defines the following values, but your provider may support some or none of them:  none The Authorization Server MUST NOT display any authentication or consent user interface pages. An error is returned if an End-User is not already authenticated or the Client does not have pre-configured consent for the requested Claims or does not fulfill other conditions for processing the request.  login The Authorization Server SHOULD prompt the End-User for reauthentication. If it cannot reauthenticate the End-User, it MUST return an error, typically login_required.  consent The Authorization Server SHOULD prompt the End-User for consent before returning information to the Client. If it cannot obtain consent, it MUST return an error, typically consent_required.  select_account The Authorization Server SHOULD prompt the End-User to select a user account. This enables an End-User who has multiple accounts at the Authorization Server to select amongst the multiple accounts that they might have current sessions for. If it cannot obtain an account selection choice made by the End-User, it MUST return an error, typically account_selection_required.",
                "param": "value",
                "type": "optional argument"
            },
            "jwt": {
                "description": "Generate a JWT Auth token instead of an OAuth Token (only works with service accounts)",
                "type": "option"
            },
            "listen": {
                "description": "Callback listener address (e.g. \":10000\")",
                "param": "address",
                "type": "optional argument"
            },
            "listen-url": {
                "description": "The redirect_uri url in the authorize request (e.g. \"http://127.0.0.1:10000\")",
                "param": "url",
                "type": "optional argument"
            },
            "redirect-url": {
                "description": "The url to open in the system browser when the OAuth flow is successful.",
                "param": "url",
                "type": "optional argument"
            }
        }
    },
    "path": {
        "__arguements__": {
            "base": {
                "description": "Return the base of the step path",
                "type": "option"
            },
            "profile": {
                "description": "Return the base path of the currently configured default profile",
                "type": "option"
            }
        }
    },
    "ssh": {
        "__subcommands__": {
            "certificate": "sign a SSH certificate using the SSH CA",
            "check-host": "checks if a certificate has been issued for a host",
            "config": "configures ssh to be used with certificates",
            "fingerprint": "print the fingerprint of an SSH public key or certificate",
            "hosts": "returns a list of all valid hosts",
            "inspect": "print the contents of an ssh certificate",
            "list": "list public keys known to the ssh agent",
            "login": "adds a SSH certificate into the authentication agent",
            "logout": "removes a private key from the ssh-agent",
            "needs-renewal": "Check if an SSH certificate needs to be renewed",
            "proxycommand": "proxy ssh connections according to the host registry",
            "rekey": "rekey a SSH certificate using the SSH CA",
            "renew": "renew a SSH certificate using the SSH CA",
            "revoke": "revoke a SSH certificate using the SSH CA"
        },
        "__arguements__": {
            "help": {
                "description": "show help",
                "alt_form": "h",
                "type": "option"
            }
        },
        "certificate": {
            "__arguements__": {
                "key-id": {
                    "description": "The certificate identity. If no principals are passed we will use the key-id as a principal, if it has the format abc@def then the principal will be abc.",
                    "type": "positional argument"
                },
                "key-file": {
                    "description": "The private key name when generating a new key pair, or the public key path when we are just signing it.",
                    "type": "positional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "insecure": {
                    "description": "",
                    "type": "option"
                },
                "no-password": {
                    "description": "Do not ask for a password to encrypt a private key. Sensitive key material will be written to disk unencrypted. This is not recommended. Requires --insecure flag.",
                    "type": "option"
                },
                "not-before": {
                    "description": "The time|duration when the certificate validity period starts. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "time|duration",
                    "type": "optional argument"
                },
                "not-after": {
                    "description": "The time|duration when the certificate validity period ends. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "time|duration",
                    "type": "optional argument"
                },
                "offline": {
                    "description": "Creates a certificate without contacting the certificate authority. Offline mode uses the configuration, certificates, and keys created with step ca init, but can accept a different configuration file using --ca-config flag.",
                    "type": "option"
                },
                "provisioner": {
                    "description": "The provisioner name to use.",
                    "param": "name",
                    "alt_form": "issuer",
                    "type": "optional argument"
                },
                "token": {
                    "description": "The one-time token used to authenticate with the CA in order to create the certificate.",
                    "param": "token",
                    "type": "optional argument"
                },
                "set": {
                    "description": "The key=value pair with template data variables. Use the --set flag multiple times to add multiple variables.",
                    "param": "key",
                    "type": "optional argument"
                },
                "set-file": {
                    "description": "The JSON file with the template data variables.",
                    "param": "file",
                    "type": "optional argument"
                },
                "add-user": {
                    "description": "Create a user provisioner certificate used to create a new user.",
                    "type": "option"
                },
                "host": {
                    "description": "Create a host certificate instead of a user certificate.",
                    "type": "option"
                },
                "host-id": {
                    "description": "Specify a UUID to identify the host rather than using an auto-generated UUID. If \"machine\" is passed, derive a UUID from \"/etc/machine-id.\"",
                    "param": "UUID",
                    "type": "optional argument"
                },
                "password-file": {
                    "description": "The path to the file containing the password to encrypt the private key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "principal": {
                    "description": "Add the specified principal (user or host names) to the certificate request. This flag can be used multiple times. However, it cannot be used in conjunction with '--token' when requesting certificates from OIDC, JWK, and X5C provisioners, or from any provisioner with 'disableCustomSANs' set to 'true'. These provisioners will use the contents of the token to determine the principals.",
                    "param": "name",
                    "alt_form": "n",
                    "type": "optional argument"
                },
                "private-key": {
                    "description": "When signing an existing public key, use this flag to specify the corresponding private key so that the pair can be added to an SSH Agent.",
                    "param": "value",
                    "type": "optional argument"
                },
                "provisioner-password-file": {
                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "sign": {
                    "description": "Sign the public key passed as an argument instead of creating one.",
                    "type": "option"
                },
                "kms": {
                    "description": "The uri to configure a Cloud KMS or an HSM.",
                    "param": "uri",
                    "type": "optional argument"
                },
                "x5c-cert": {
                    "description": "Certificate (chain) in PEM format to store in the 'x5c' header of a JWT.",
                    "param": "chain",
                    "type": "optional argument"
                },
                "x5c-key": {
                    "description": "Private key file, used to sign a JWT, corresponding to the certificate that will be stored in the 'x5c' header.",
                    "param": "file",
                    "type": "optional argument"
                },
                "x5c-chain": {
                    "description": "Certificate file, in PEM format",
                    "param": "file",
                    "type": "optional argument"
                },
                "nebula-cert": {
                    "description": "Certificate file in PEM format to store in the 'nebula' header of a JWT.",
                    "param": "file",
                    "type": "optional argument"
                },
                "nebula-key": {
                    "description": "Private key file, used to sign a JWT, corresponding to the certificate that will be stored in the 'nebula' header.",
                    "param": "file",
                    "type": "optional argument"
                },
                "k8ssa-token-path": {
                    "description": "Configure the file from which to read the kubernetes service account token.",
                    "param": "file",
                    "type": "optional argument"
                },
                "no-agent": {
                    "description": "Do not add the generated certificate and associated private key to the SSH agent.",
                    "type": "option"
                },
                "ca-config": {
                    "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                    "param": "file",
                    "type": "optional argument"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "check-host": {
            "__arguements__": {
                "hostname": {
                    "description": "The hostname of the server to check.",
                    "type": "positional argument"
                },
                "verbose": {
                    "description": "Return \"true\" or \"false\" in the terminal.",
                    "alt_form": "v",
                    "type": "option"
                },
                "ca-config": {
                    "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                    "param": "file",
                    "type": "optional argument"
                },
                "offline": {
                    "description": "Creates a certificate without contacting the certificate authority. Offline mode uses the configuration, certificates, and keys created with step ca init, but can accept a different configuration file using --ca-config flag.",
                    "type": "option"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "config": {
            "__arguements__": {
                "host": {
                    "description": "Configures a SSH server instead of a client.",
                    "type": "option"
                },
                "team": {
                    "description": "The team ID used to bootstrap the environment.",
                    "param": "ID",
                    "type": "optional argument"
                },
                "team-authority": {
                    "description": "The sub-domain of the certificate authority to bootstrap. E.g., for an authority with domain name 'certs.example-team.ca.smallstep.com' the value would be 'certs'.",
                    "param": "sub-domain",
                    "type": "optional argument"
                },
                "team-url": {
                    "description": "The url step queries to retrieve initial team configuration. Only used with the --team option. If the url contains <> placeholders, they are replaced with the team ID. Replacing the authority-id section of the url is not supported with placeholders.",
                    "param": "url",
                    "type": "optional argument"
                },
                "roots": {
                    "description": "Prints the public keys used to verify user or host certificates.",
                    "type": "option"
                },
                "federation": {
                    "description": "Prints all the public keys in the federation. These keys are used to verify user or host certificates",
                    "type": "option"
                },
                "set": {
                    "description": "The key=value used as a variable in the templates. Use the flag multiple times to set multiple variables.",
                    "param": "key",
                    "type": "optional argument"
                },
                "set-file": {
                    "description": "The JSON file with the template data variables.",
                    "param": "file",
                    "type": "optional argument"
                },
                "dry-run": {
                    "description": "Executes the command without changing any file.",
                    "type": "option"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "ca-config": {
                    "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                    "param": "file",
                    "type": "optional argument"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "offline": {
                    "description": "Creates a certificate without contacting the certificate authority. Offline mode uses the configuration, certificates, and keys created with step ca init, but can accept a different configuration file using --ca-config flag.",
                    "type": "option"
                },
                "context": {
                    "description": "The name of the context for the new authority.",
                    "param": "name",
                    "type": "optional argument"
                },
                "profile": {
                    "description": "The name that will serve as the profile name for the context.",
                    "param": "name",
                    "type": "optional argument"
                },
                "authority": {
                    "description": "The name that will serve as the authority name for the context.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "fingerprint": {
            "__arguements__": {
                "file": {
                    "description": "The path to an SSH public key or certificate.",
                    "type": "positional argument"
                },
                "format": {
                    "description": "The format of the fingerprint, it must be \"hex\", \"base64\", \"base64-url\", \"base64-raw\", \"base64-url-raw\" or \"emoji\".",
                    "param": "format",
                    "type": "optional argument"
                },
                "certificate": {
                    "description": "Include SSH certificate bytes in fingerprint",
                    "type": "option"
                }
            }
        },
        "hosts": {
            "__arguements__": {
                "set": {
                    "description": "The key=value pair with template data variables. Use the --set flag multiple times to add multiple variables.",
                    "param": "key",
                    "type": "optional argument"
                },
                "set-file": {
                    "description": "The JSON file with the template data variables.",
                    "param": "file",
                    "type": "optional argument"
                },
                "offline": {
                    "description": "Creates a certificate without contacting the certificate authority. Offline mode uses the configuration, certificates, and keys created with step ca init, but can accept a different configuration file using --ca-config flag.",
                    "type": "option"
                },
                "ca-config": {
                    "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                    "param": "file",
                    "type": "optional argument"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "inspect": {
            "__arguements__": {
                "crt-file": {
                    "description": "The path to an ssh certificate.",
                    "type": "positional argument"
                },
                "format": {
                    "description": "The output format for printing the introspection details.  format is a string and must be one of:  text Print output in unstructured text suitable for a human to read.  json Print output in JSON format.",
                    "param": "format",
                    "type": "optional argument"
                }
            }
        },
        "list": {
            "__arguements__": {
                "subject": {
                    "description": "Optional subject or comment to filter keys by.",
                    "type": "positional argument"
                },
                "raw": {
                    "description": "List public keys instead of fingerprints.",
                    "type": "option"
                }
            }
        },
        "login": {
            "__arguements__": {
                "identity": {
                    "description": "The certificate identity. It is usually passed as a positional argument, but a flag exists so it can be configured in $STEPPATH/config/defaults.json.",
                    "param": "value",
                    "type": "optional argument"
                },
                "token": {
                    "description": "The one-time token used to authenticate with the CA in order to create the certificate.",
                    "param": "token",
                    "type": "optional argument"
                },
                "add-user": {
                    "description": "Create a user provisioner certificate used to create a new user.",
                    "type": "option"
                },
                "principal": {
                    "description": "Add the specified principal (username) to the certificate request. This flag can be used multiple times. However, it cannot be used in conjunction with '--token' when requesting certificates from OIDC, JWK, and X5C provisioners, or from any provisioner with 'disableCustomSANs' set to 'true'. These provisioners will use the contents of the token to determine the principals.",
                    "param": "value",
                    "alt_form": "n",
                    "type": "optional argument"
                },
                "provisioner": {
                    "description": "The provisioner name to use.",
                    "param": "name",
                    "alt_form": "issuer",
                    "type": "optional argument"
                },
                "provisioner-password-file": {
                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                    "param": "file",
                    "alt_form": "password-file",
                    "type": "optional argument"
                },
                "not-before": {
                    "description": "The time|duration when the certificate validity period starts. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "time|duration",
                    "type": "optional argument"
                },
                "not-after": {
                    "description": "The time|duration when the certificate validity period ends. If a time is used it is expected to be in RFC 3339 format. If a duration is used, it is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "time|duration",
                    "type": "optional argument"
                },
                "set": {
                    "description": "The key=value pair with template data variables. Use the --set flag multiple times to add multiple variables.",
                    "param": "key",
                    "type": "optional argument"
                },
                "set-file": {
                    "description": "The JSON file with the template data variables.",
                    "param": "file",
                    "type": "optional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "offline": {
                    "description": "Creates a certificate without contacting the certificate authority. Offline mode uses the configuration, certificates, and keys created with step ca init, but can accept a different configuration file using --ca-config flag.",
                    "type": "option"
                },
                "ca-config": {
                    "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                    "param": "file",
                    "type": "optional argument"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "logout": {
            "__arguements__": {
                "identity": {
                    "description": "The certificate identity. It is usually passed as a positional argument, but a flag exists so it can be configured in $STEPPATH/config/defaults.json.",
                    "param": "value",
                    "type": "optional argument"
                },
                "all": {
                    "description": "Removes all the keys stored in the SSH agent.",
                    "type": "option"
                },
                "offline": {
                    "description": "Creates a certificate without contacting the certificate authority. Offline mode uses the configuration, certificates, and keys created with step ca init, but can accept a different configuration file using --ca-config flag.",
                    "type": "option"
                },
                "ca-config": {
                    "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                    "param": "file",
                    "type": "optional argument"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "needs-renewal": {
            "__arguements__": {
                "cert-file": {
                    "description": "The path to an SSH certificate.",
                    "type": "positional argument"
                },
                "expires-in": {
                    "description": "Check if the certificate expires within the given time window using percent|duration. If using percent, the input must be followed by a \"%\" character. If using duration, the input must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "param": "percent|duration",
                    "type": "optional argument"
                },
                "verbose": {
                    "description": "Print human readable affirmation if certificate requires renewal.",
                    "alt_form": "v",
                    "type": "option"
                }
            }
        },
        "proxycommand": {
            "__arguements__": {
                "user": {
                    "description": "The remote username, and the subject used to login.",
                    "type": "positional argument"
                },
                "host": {
                    "description": "The host to connect to.",
                    "type": "positional argument"
                },
                "port": {
                    "description": "The port to connect to.",
                    "type": "positional argument"
                },
                "provisioner": {
                    "description": "The provisioner name to use.",
                    "param": "name",
                    "alt_form": "issuer",
                    "type": "optional argument"
                },
                "provisioner-password-file": {
                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                    "param": "file",
                    "alt_form": "password-file",
                    "type": "optional argument"
                },
                "set": {
                    "description": "The key=value pair with template data variables. Use the --set flag multiple times to add multiple variables.",
                    "param": "key",
                    "type": "optional argument"
                },
                "set-file": {
                    "description": "The JSON file with the template data variables.",
                    "param": "file",
                    "type": "optional argument"
                },
                "offline": {
                    "description": "Creates a certificate without contacting the certificate authority. Offline mode uses the configuration, certificates, and keys created with step ca init, but can accept a different configuration file using --ca-config flag.",
                    "type": "option"
                },
                "ca-config": {
                    "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                    "param": "file",
                    "type": "optional argument"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "rekey": {
            "__arguements__": {
                "ssh-cert": {
                    "description": "The ssh certificate to renew.",
                    "type": "positional argument"
                },
                "ssh-key": {
                    "description": "The ssh certificate private key.",
                    "type": "positional argument"
                },
                "out": {
                    "description": "The new key file. Defaults to overwriting the ssh-key positional argument.",
                    "param": "file",
                    "type": "optional argument"
                },
                "provisioner": {
                    "description": "The provisioner name to use.",
                    "param": "name",
                    "alt_form": "issuer",
                    "type": "optional argument"
                },
                "provisioner-password-file": {
                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "no-password": {
                    "description": "Do not ask for a password to encrypt a private key. Sensitive key material will be written to disk unencrypted. This is not recommended. Requires --insecure flag.",
                    "type": "option"
                },
                "insecure": {
                    "description": "",
                    "type": "option"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "sshpop-cert": {
                    "description": "Certificate (chain) in PEM format to store in the 'sshpop' header of a JWT.",
                    "param": "chain",
                    "type": "optional argument"
                },
                "sshpop-key": {
                    "description": "Private key file, used to sign a JWT, corresponding to the certificate that will be stored in the 'sshpop' header.",
                    "param": "file",
                    "type": "optional argument"
                },
                "offline": {
                    "description": "Creates a certificate without contacting the certificate authority. Offline mode uses the configuration, certificates, and keys created with step ca init, but can accept a different configuration file using --ca-config flag.",
                    "type": "option"
                },
                "ca-config": {
                    "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                    "param": "file",
                    "type": "optional argument"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "renew": {
            "__arguements__": {
                "ssh-cert": {
                    "description": "The ssh certificate to renew.",
                    "type": "positional argument"
                },
                "ssh-key": {
                    "description": "The ssh certificate private key.",
                    "type": "positional argument"
                },
                "out": {
                    "description": "The new certificate file. Defaults to overwriting the ssh-cert positional argument",
                    "param": "file",
                    "alt_form": "output-file",
                    "type": "optional argument"
                },
                "provisioner": {
                    "description": "The provisioner name to use.",
                    "param": "name",
                    "alt_form": "issuer",
                    "type": "optional argument"
                },
                "provisioner-password-file": {
                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "sshpop-cert": {
                    "description": "Certificate (chain) in PEM format to store in the 'sshpop' header of a JWT.",
                    "param": "chain",
                    "type": "optional argument"
                },
                "sshpop-key": {
                    "description": "Private key file, used to sign a JWT, corresponding to the certificate that will be stored in the 'sshpop' header.",
                    "param": "file",
                    "type": "optional argument"
                },
                "f": {
                    "description": "Force the overwrite of files without asking.",
                    "alt_form": "force",
                    "type": "option"
                },
                "offline": {
                    "description": "Creates a certificate without contacting the certificate authority. Offline mode uses the configuration, certificates, and keys created with step ca init, but can accept a different configuration file using --ca-config flag.",
                    "type": "option"
                },
                "ca-config": {
                    "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                    "param": "file",
                    "type": "optional argument"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        },
        "revoke": {
            "__arguements__": {
                "serial-number": {
                    "description": "The serial number of the SSH certificate to revoke.",
                    "type": "positional argument"
                },
                "token": {
                    "description": "The one-time token used to authenticate with the CA in order to create the certificate.",
                    "param": "token",
                    "type": "optional argument"
                },
                "provisioner-password-file": {
                    "description": "The path to the file containing the password to decrypt the one-time token generating key.",
                    "param": "file",
                    "type": "optional argument"
                },
                "provisioner": {
                    "description": "The provisioner name to use.",
                    "param": "name",
                    "alt_form": "issuer",
                    "type": "optional argument"
                },
                "set": {
                    "description": "The key=value pair with template data variables. Use the --set flag multiple times to add multiple variables.",
                    "param": "key",
                    "type": "optional argument"
                },
                "set-file": {
                    "description": "The JSON file with the template data variables.",
                    "param": "file",
                    "type": "optional argument"
                },
                "sshpop-cert": {
                    "description": "Certificate (chain) in PEM format to store in the 'sshpop' header of a JWT.",
                    "param": "chain",
                    "type": "optional argument"
                },
                "sshpop-key": {
                    "description": "Private key file, used to sign a JWT, corresponding to the certificate that will be stored in the 'sshpop' header.",
                    "param": "file",
                    "type": "optional argument"
                },
                "reason": {
                    "description": "The string representing the reason for which the cert is being revoked.",
                    "param": "string",
                    "type": "optional argument"
                },
                "reasonCode": {
                    "description": "The reasonCode specifies the reason for revocation - chose from a list of common revocation reasons. If unset, the default is Unspecified.  reasonCode can be a number from 0-9 or a case insensitive string matching one of the following options:  Unspecified No reason given (Default -- reasonCode=0).  KeyCompromise The key is believed to have been compromised (reasonCode=1).  CACompromise The issuing Certificate Authority itself has been compromised (reasonCode=2).  AffiliationChanged The certificate contained affiliation information, for example, it may have been an EV certificate and the associated business is no longer owned by the same entity (reasonCode=3).  Superseded The certificate is being replaced (reasonCode=4).  CessationOfOperation If a CA is decommissioned, no longer to be used, the CA's certificate should be revoked with this reason code. Do not revoke the CA's certificate if the CA no longer issues new certificates, yet still publishes CRLs for the currently issued certificates (reasonCode=5).  CertificateHold A temporary revocation that indicates that a CA will not vouch for a certificate at a specific point in time. Once a certificate is revoked with a CertificateHold reason code, the certificate can then be revoked with another Reason Code, or unrevoked and returned to use (reasonCode=6).  RemoveFromCRL If a certificate is revoked with the CertificateHold reason code, it is possible to \"unrevoke\" a certificate. The unrevoking process still lists the certificate in the CRL, but with the reason code set to RemoveFromCRL. Note: This is specific to the CertificateHold reason and is only used in DeltaCRLs (reasonCode=8).  PrivilegeWithdrawn The right to represent the given entity was revoked for some reason (reasonCode=9).  AACompromise It is known or suspected that aspects of the AA validated in the attribute certificate have been compromised (reasonCode=10).",
                    "param": "reasonCode",
                    "type": "optional argument"
                },
                "offline": {
                    "description": "Creates a certificate without contacting the certificate authority. Offline mode uses the configuration, certificates, and keys created with step ca init, but can accept a different configuration file using --ca-config flag.",
                    "type": "option"
                },
                "ca-config": {
                    "description": "The certificate authority configuration file. Defaults to $(step path)/config/ca.json",
                    "param": "file",
                    "type": "optional argument"
                },
                "ca-url": {
                    "description": "URI of the targeted Step Certificate Authority.",
                    "param": "URI",
                    "type": "optional argument"
                },
                "root": {
                    "description": "The path to the PEM file used as the root certificate authority.",
                    "param": "file",
                    "type": "optional argument"
                },
                "context": {
                    "description": "The context name to apply for the given command.",
                    "param": "name",
                    "type": "optional argument"
                }
            }
        }
    }
}